
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004328  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004614  08004614  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ba28  20000078  08004694  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000baa0  08004694  0002baa0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b17  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002826  00000000  00000000  00032bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  000353e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00036348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a3a  00000000  00000000  00037190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dd1  00000000  00000000  00060bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff231  00000000  00000000  0007199b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  00170c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08004510 	.word	0x08004510

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08004510 	.word	0x08004510

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96e 	b.w	8000534 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468c      	mov	ip, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8083 	bne.w	8000386 <__udivmoddi4+0x116>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d947      	bls.n	8000316 <__udivmoddi4+0xa6>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b142      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028c:	f1c2 0020 	rsb	r0, r2, #32
 8000290:	fa24 f000 	lsr.w	r0, r4, r0
 8000294:	4091      	lsls	r1, r2
 8000296:	4097      	lsls	r7, r2
 8000298:	ea40 0c01 	orr.w	ip, r0, r1
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbbc f6f8 	udiv	r6, ip, r8
 80002a8:	fa1f fe87 	uxth.w	lr, r7
 80002ac:	fb08 c116 	mls	r1, r8, r6, ip
 80002b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b4:	fb06 f10e 	mul.w	r1, r6, lr
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c2:	f080 8119 	bcs.w	80004f8 <__udivmoddi4+0x288>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8116 	bls.w	80004f8 <__udivmoddi4+0x288>
 80002cc:	3e02      	subs	r6, #2
 80002ce:	443b      	add	r3, r7
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d8:	fb08 3310 	mls	r3, r8, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	193c      	adds	r4, r7, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8105 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f240 8102 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002f8:	3802      	subs	r0, #2
 80002fa:	443c      	add	r4, r7
 80002fc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000300:	eba4 040e 	sub.w	r4, r4, lr
 8000304:	2600      	movs	r6, #0
 8000306:	b11d      	cbz	r5, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c5 4300 	strd	r4, r3, [r5]
 8000310:	4631      	mov	r1, r6
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xaa>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	2a00      	cmp	r2, #0
 8000320:	d150      	bne.n	80003c4 <__udivmoddi4+0x154>
 8000322:	1bcb      	subs	r3, r1, r7
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	fa1f f887 	uxth.w	r8, r7
 800032c:	2601      	movs	r6, #1
 800032e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000332:	0c21      	lsrs	r1, r4, #16
 8000334:	fb0e 331c 	mls	r3, lr, ip, r3
 8000338:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800033c:	fb08 f30c 	mul.w	r3, r8, ip
 8000340:	428b      	cmp	r3, r1
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000344:	1879      	adds	r1, r7, r1
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0xe2>
 800034c:	428b      	cmp	r3, r1
 800034e:	f200 80e9 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 8000352:	4684      	mov	ip, r0
 8000354:	1ac9      	subs	r1, r1, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x10c>
 800036c:	193c      	adds	r4, r7, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x10a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80d9 	bhi.w	800052c <__udivmoddi4+0x2bc>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e7bf      	b.n	8000306 <__udivmoddi4+0x96>
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x12e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80b1 	beq.w	80004f2 <__udivmoddi4+0x282>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x1cc>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0x140>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80b8 	bhi.w	8000520 <__udivmoddi4+0x2b0>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0103 	sbc.w	r1, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	468c      	mov	ip, r1
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0a8      	beq.n	8000310 <__udivmoddi4+0xa0>
 80003be:	e9c5 4c00 	strd	r4, ip, [r5]
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0xa0>
 80003c4:	f1c2 0320 	rsb	r3, r2, #32
 80003c8:	fa20 f603 	lsr.w	r6, r0, r3
 80003cc:	4097      	lsls	r7, r2
 80003ce:	fa01 f002 	lsl.w	r0, r1, r2
 80003d2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d6:	40d9      	lsrs	r1, r3
 80003d8:	4330      	orrs	r0, r6
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e0:	fa1f f887 	uxth.w	r8, r7
 80003e4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb06 f108 	mul.w	r1, r6, r8
 80003f0:	4299      	cmp	r1, r3
 80003f2:	fa04 f402 	lsl.w	r4, r4, r2
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x19c>
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003fe:	f080 808d 	bcs.w	800051c <__udivmoddi4+0x2ac>
 8000402:	4299      	cmp	r1, r3
 8000404:	f240 808a 	bls.w	800051c <__udivmoddi4+0x2ac>
 8000408:	3e02      	subs	r6, #2
 800040a:	443b      	add	r3, r7
 800040c:	1a5b      	subs	r3, r3, r1
 800040e:	b281      	uxth	r1, r0
 8000410:	fbb3 f0fe 	udiv	r0, r3, lr
 8000414:	fb0e 3310 	mls	r3, lr, r0, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb00 f308 	mul.w	r3, r0, r8
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x1c4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f100 3cff 	add.w	ip, r0, #4294967295
 800042a:	d273      	bcs.n	8000514 <__udivmoddi4+0x2a4>
 800042c:	428b      	cmp	r3, r1
 800042e:	d971      	bls.n	8000514 <__udivmoddi4+0x2a4>
 8000430:	3802      	subs	r0, #2
 8000432:	4439      	add	r1, r7
 8000434:	1acb      	subs	r3, r1, r3
 8000436:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800043a:	e778      	b.n	800032e <__udivmoddi4+0xbe>
 800043c:	f1c6 0c20 	rsb	ip, r6, #32
 8000440:	fa03 f406 	lsl.w	r4, r3, r6
 8000444:	fa22 f30c 	lsr.w	r3, r2, ip
 8000448:	431c      	orrs	r4, r3
 800044a:	fa20 f70c 	lsr.w	r7, r0, ip
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000456:	fa21 f10c 	lsr.w	r1, r1, ip
 800045a:	431f      	orrs	r7, r3
 800045c:	0c3b      	lsrs	r3, r7, #16
 800045e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000462:	fa1f f884 	uxth.w	r8, r4
 8000466:	fb0e 1119 	mls	r1, lr, r9, r1
 800046a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046e:	fb09 fa08 	mul.w	sl, r9, r8
 8000472:	458a      	cmp	sl, r1
 8000474:	fa02 f206 	lsl.w	r2, r2, r6
 8000478:	fa00 f306 	lsl.w	r3, r0, r6
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x220>
 800047e:	1861      	adds	r1, r4, r1
 8000480:	f109 30ff 	add.w	r0, r9, #4294967295
 8000484:	d248      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 8000486:	458a      	cmp	sl, r1
 8000488:	d946      	bls.n	8000518 <__udivmoddi4+0x2a8>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4421      	add	r1, r4
 8000490:	eba1 010a 	sub.w	r1, r1, sl
 8000494:	b2bf      	uxth	r7, r7
 8000496:	fbb1 f0fe 	udiv	r0, r1, lr
 800049a:	fb0e 1110 	mls	r1, lr, r0, r1
 800049e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004a2:	fb00 f808 	mul.w	r8, r0, r8
 80004a6:	45b8      	cmp	r8, r7
 80004a8:	d907      	bls.n	80004ba <__udivmoddi4+0x24a>
 80004aa:	19e7      	adds	r7, r4, r7
 80004ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b0:	d22e      	bcs.n	8000510 <__udivmoddi4+0x2a0>
 80004b2:	45b8      	cmp	r8, r7
 80004b4:	d92c      	bls.n	8000510 <__udivmoddi4+0x2a0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4427      	add	r7, r4
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	eba7 0708 	sub.w	r7, r7, r8
 80004c2:	fba0 8902 	umull	r8, r9, r0, r2
 80004c6:	454f      	cmp	r7, r9
 80004c8:	46c6      	mov	lr, r8
 80004ca:	4649      	mov	r1, r9
 80004cc:	d31a      	bcc.n	8000504 <__udivmoddi4+0x294>
 80004ce:	d017      	beq.n	8000500 <__udivmoddi4+0x290>
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x27a>
 80004d2:	ebb3 020e 	subs.w	r2, r3, lr
 80004d6:	eb67 0701 	sbc.w	r7, r7, r1
 80004da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004de:	40f2      	lsrs	r2, r6
 80004e0:	ea4c 0202 	orr.w	r2, ip, r2
 80004e4:	40f7      	lsrs	r7, r6
 80004e6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ea:	2600      	movs	r6, #0
 80004ec:	4631      	mov	r1, r6
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e70b      	b.n	8000310 <__udivmoddi4+0xa0>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0x60>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fd      	b.n	80002fc <__udivmoddi4+0x8c>
 8000500:	4543      	cmp	r3, r8
 8000502:	d2e5      	bcs.n	80004d0 <__udivmoddi4+0x260>
 8000504:	ebb8 0e02 	subs.w	lr, r8, r2
 8000508:	eb69 0104 	sbc.w	r1, r9, r4
 800050c:	3801      	subs	r0, #1
 800050e:	e7df      	b.n	80004d0 <__udivmoddi4+0x260>
 8000510:	4608      	mov	r0, r1
 8000512:	e7d2      	b.n	80004ba <__udivmoddi4+0x24a>
 8000514:	4660      	mov	r0, ip
 8000516:	e78d      	b.n	8000434 <__udivmoddi4+0x1c4>
 8000518:	4681      	mov	r9, r0
 800051a:	e7b9      	b.n	8000490 <__udivmoddi4+0x220>
 800051c:	4666      	mov	r6, ip
 800051e:	e775      	b.n	800040c <__udivmoddi4+0x19c>
 8000520:	4630      	mov	r0, r6
 8000522:	e74a      	b.n	80003ba <__udivmoddi4+0x14a>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	4439      	add	r1, r7
 800052a:	e713      	b.n	8000354 <__udivmoddi4+0xe4>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e724      	b.n	800037c <__udivmoddi4+0x10c>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fa2c 	bl	800099a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f827 	bl	8000594 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2302      	movs	r3, #2
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <main+0x44>)
 8000552:	22c8      	movs	r2, #200	; 0xc8
 8000554:	490a      	ldr	r1, [pc, #40]	; (8000580 <main+0x48>)
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <main+0x4c>)
 8000558:	f001 fe58 	bl	800220c <xTaskCreate>
 800055c:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);


  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <main+0x50>)
 8000568:	22c8      	movs	r2, #200	; 0xc8
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <main+0x54>)
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <main+0x58>)
 800056e:	f001 fe4d 	bl	800220c <xTaskCreate>
 8000572:	60f8      	str	r0, [r7, #12]

  configASSERT(status == pdPASS);

  // start the freeRTOS scheduler

  vTaskStartScheduler();
 8000574:	f001 ff9a 	bl	80024ac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x40>
 800057a:	bf00      	nop
 800057c:	08004528 	.word	0x08004528
 8000580:	08004540 	.word	0x08004540
 8000584:	0800064d 	.word	0x0800064d
 8000588:	08004548 	.word	0x08004548
 800058c:	08004560 	.word	0x08004560
 8000590:	08000671 	.word	0x08000671

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fad8 	bl	8003b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xb0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xb0>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xb0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <SystemClock_Config+0xb4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <SystemClock_Config+0xb4>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <SystemClock_Config+0xb4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fad9 	bl	8000bb8 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800060c:	f000 f854 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fd72 	bl	8001114 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000636:	f000 f83f 	bl	80006b8 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f003 faf5 	bl	8003c44 <puts>
		taskYIELD();
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <task1_handler+0x20>)
 800065c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800066a:	e7f3      	b.n	8000654 <task1_handler+0x8>
 800066c:	e000ed04 	.word	0xe000ed04

08000670 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f003 fae3 	bl	8003c44 <puts>
		taskYIELD();
 800067e:	4b04      	ldr	r3, [pc, #16]	; (8000690 <task2_handler+0x20>)
 8000680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800068e:	e7f3      	b.n	8000678 <task2_handler+0x8>
 8000690:	e000ed04 	.word	0xe000ed04

08000694 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d101      	bne.n	80006aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006a6:	f000 f985 	bl	80009b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40001000 	.word	0x40001000

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x44>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x44>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x44>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x44>)
 80006e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ec:	6453      	str	r3, [r2, #68]	; 0x44
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x44>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800071c:	2200      	movs	r2, #0
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	2036      	movs	r0, #54	; 0x36
 8000722:	f000 fa1f 	bl	8000b64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000726:	2036      	movs	r0, #54	; 0x36
 8000728:	f000 fa38 	bl	8000b9c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <HAL_InitTick+0x9c>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <HAL_InitTick+0x9c>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <HAL_InitTick+0x9c>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000744:	f107 0210 	add.w	r2, r7, #16
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fea2 	bl	8001498 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000754:	f000 fe8c 	bl	8001470 <HAL_RCC_GetPCLK1Freq>
 8000758:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <HAL_InitTick+0xa0>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	0c9b      	lsrs	r3, r3, #18
 8000764:	3b01      	subs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_InitTick+0xa4>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <HAL_InitTick+0xa8>)
 800076c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_InitTick+0xa4>)
 8000770:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000774:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_InitTick+0xa4>)
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_InitTick+0xa4>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <HAL_InitTick+0xa4>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <HAL_InitTick+0xa4>)
 800078a:	f000 feb7 	bl	80014fc <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d104      	bne.n	800079e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <HAL_InitTick+0xa4>)
 8000796:	f000 ff13 	bl	80015c0 <HAL_TIM_Base_Start_IT>
 800079a:	4603      	mov	r3, r0
 800079c:	e000      	b.n	80007a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	431bde83 	.word	0x431bde83
 80007b0:	2000ba00 	.word	0x2000ba00
 80007b4:	40001000 	.word	0x40001000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <TIM6_DAC_IRQHandler+0x10>)
 80007ea:	f000 ff61 	bl	80016b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000ba00 	.word	0x2000ba00

080007f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <ITM_SendChar+0x48>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <ITM_SendChar+0x48>)
 8000808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800080c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <ITM_SendChar+0x4c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <ITM_SendChar+0x4c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800081a:	bf00      	nop
 800081c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f8      	beq.n	800081c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800082a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000edfc 	.word	0xe000edfc
 8000844:	e0000e00 	.word	0xe0000e00

08000848 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e00a      	b.n	8000870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800085a:	f3af 8000 	nop.w
 800085e:	4601      	mov	r1, r0
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	b2ca      	uxtb	r2, r1
 8000868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	dbf0      	blt.n	800085a <_read+0x12>
	}

return len;
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e009      	b.n	80008a8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	60ba      	str	r2, [r7, #8]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffab 	bl	80007f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3301      	adds	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dbf1      	blt.n	8000894 <_write+0x12>
	}
	return len;
 80008b0:	687b      	ldr	r3, [r7, #4]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <_close>:

int _close(int file)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	return -1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e2:	605a      	str	r2, [r3, #4]
	return 0;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <_isatty>:

int _isatty(int file)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	return 1;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
	return 0;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800094e:	490e      	ldr	r1, [pc, #56]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000964:	4c0b      	ldr	r4, [pc, #44]	; (8000994 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000972:	f7ff ffd7 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f003 f8bd 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fddd 	bl	8000538 <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000980:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800098c:	0800461c 	.word	0x0800461c
  ldr r2, =_sbss
 8000990:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000994:	2000baa0 	.word	0x2000baa0

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>

0800099a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 f8d5 	bl	8000b4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a4:	200f      	movs	r0, #15
 80009a6:	f7ff feb1 	bl	800070c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009aa:	f7ff fe8b 	bl	80006c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	2000ba4c 	.word	0x2000ba4c

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2000ba4c 	.word	0x2000ba4c

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <__NVIC_SetPriorityGrouping+0x40>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x40>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00
 8000a38:	05fa0000 	.word	0x05fa0000

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff4c 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b76:	f7ff ff61 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ffb1 	bl	8000ae8 <NVIC_EncodePriority>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff80 	bl	8000a94 <__NVIC_SetPriority>
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff54 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e29b      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8087 	beq.w	8000cea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bdc:	4b96      	ldr	r3, [pc, #600]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d00c      	beq.n	8000c02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000be8:	4b93      	ldr	r3, [pc, #588]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d112      	bne.n	8000c1a <HAL_RCC_OscConfig+0x62>
 8000bf4:	4b90      	ldr	r3, [pc, #576]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c00:	d10b      	bne.n	8000c1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	4b8d      	ldr	r3, [pc, #564]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d06c      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x130>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d168      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e275      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c22:	d106      	bne.n	8000c32 <HAL_RCC_OscConfig+0x7a>
 8000c24:	4b84      	ldr	r3, [pc, #528]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a83      	ldr	r2, [pc, #524]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e02e      	b.n	8000c90 <HAL_RCC_OscConfig+0xd8>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x9c>
 8000c3a:	4b7f      	ldr	r3, [pc, #508]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a7e      	ldr	r2, [pc, #504]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a7b      	ldr	r2, [pc, #492]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e01d      	b.n	8000c90 <HAL_RCC_OscConfig+0xd8>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c5c:	d10c      	bne.n	8000c78 <HAL_RCC_OscConfig+0xc0>
 8000c5e:	4b76      	ldr	r3, [pc, #472]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a75      	ldr	r2, [pc, #468]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b73      	ldr	r3, [pc, #460]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a72      	ldr	r2, [pc, #456]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e00b      	b.n	8000c90 <HAL_RCC_OscConfig+0xd8>
 8000c78:	4b6f      	ldr	r3, [pc, #444]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a6e      	ldr	r2, [pc, #440]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a6b      	ldr	r2, [pc, #428]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c98:	f7ff fea0 	bl	80009dc <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fe9c 	bl	80009dc <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e229      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb2:	4b61      	ldr	r3, [pc, #388]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f0      	beq.n	8000ca0 <HAL_RCC_OscConfig+0xe8>
 8000cbe:	e014      	b.n	8000cea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fe8c 	bl	80009dc <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fe88 	bl	80009dc <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e215      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cda:	4b57      	ldr	r3, [pc, #348]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x110>
 8000ce6:	e000      	b.n	8000cea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d069      	beq.n	8000dca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf6:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f003 030c 	and.w	r3, r3, #12
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d02:	4b4d      	ldr	r3, [pc, #308]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d11c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x190>
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d116      	bne.n	8000d48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <HAL_RCC_OscConfig+0x17a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d001      	beq.n	8000d32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e1e9      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	493d      	ldr	r1, [pc, #244]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	e040      	b.n	8000dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d023      	beq.n	8000d98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d50:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a38      	ldr	r2, [pc, #224]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fe3e 	bl	80009dc <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d64:	f7ff fe3a 	bl	80009dc <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e1c7      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d76:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d82:	4b2d      	ldr	r3, [pc, #180]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4929      	ldr	r1, [pc, #164]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
 8000d96:	e018      	b.n	8000dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da4:	f7ff fe1a 	bl	80009dc <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dac:	f7ff fe16 	bl	80009dc <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e1a3      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d038      	beq.n	8000e48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d019      	beq.n	8000e12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dea:	f7ff fdf7 	bl	80009dc <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df0:	e008      	b.n	8000e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df2:	f7ff fdf3 	bl	80009dc <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d901      	bls.n	8000e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e00:	2303      	movs	r3, #3
 8000e02:	e180      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f0      	beq.n	8000df2 <HAL_RCC_OscConfig+0x23a>
 8000e10:	e01a      	b.n	8000e48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_RCC_OscConfig+0x280>)
 8000e18:	f023 0301 	bic.w	r3, r3, #1
 8000e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e1e:	f7ff fddd 	bl	80009dc <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e24:	e00a      	b.n	8000e3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e26:	f7ff fdd9 	bl	80009dc <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d903      	bls.n	8000e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e166      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
 8000e38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1ee      	bne.n	8000e26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a4 	beq.w	8000f9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	4b8c      	ldr	r3, [pc, #560]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b89      	ldr	r3, [pc, #548]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a88      	ldr	r2, [pc, #544]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b86      	ldr	r3, [pc, #536]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e7e:	4b83      	ldr	r3, [pc, #524]	; (800108c <HAL_RCC_OscConfig+0x4d4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000e8a:	4b80      	ldr	r3, [pc, #512]	; (800108c <HAL_RCC_OscConfig+0x4d4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a7f      	ldr	r2, [pc, #508]	; (800108c <HAL_RCC_OscConfig+0x4d4>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fda1 	bl	80009dc <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9e:	f7ff fd9d 	bl	80009dc <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	; 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e12a      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eb0:	4b76      	ldr	r3, [pc, #472]	; (800108c <HAL_RCC_OscConfig+0x4d4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x31a>
 8000ec4:	4b70      	ldr	r3, [pc, #448]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec8:	4a6f      	ldr	r2, [pc, #444]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed0:	e02d      	b.n	8000f2e <HAL_RCC_OscConfig+0x376>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x33c>
 8000eda:	4b6b      	ldr	r3, [pc, #428]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ede:	4a6a      	ldr	r2, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee6:	4b68      	ldr	r3, [pc, #416]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eea:	4a67      	ldr	r2, [pc, #412]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef2:	e01c      	b.n	8000f2e <HAL_RCC_OscConfig+0x376>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d10c      	bne.n	8000f16 <HAL_RCC_OscConfig+0x35e>
 8000efc:	4b62      	ldr	r3, [pc, #392]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	4a61      	ldr	r2, [pc, #388]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6713      	str	r3, [r2, #112]	; 0x70
 8000f08:	4b5f      	ldr	r3, [pc, #380]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6713      	str	r3, [r2, #112]	; 0x70
 8000f14:	e00b      	b.n	8000f2e <HAL_RCC_OscConfig+0x376>
 8000f16:	4b5c      	ldr	r3, [pc, #368]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1a:	4a5b      	ldr	r2, [pc, #364]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6713      	str	r3, [r2, #112]	; 0x70
 8000f22:	4b59      	ldr	r3, [pc, #356]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f26:	4a58      	ldr	r2, [pc, #352]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f28:	f023 0304 	bic.w	r3, r3, #4
 8000f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d015      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f36:	f7ff fd51 	bl	80009dc <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fd4d 	bl	80009dc <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e0d8      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f54:	4b4c      	ldr	r3, [pc, #304]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0ee      	beq.n	8000f3e <HAL_RCC_OscConfig+0x386>
 8000f60:	e014      	b.n	8000f8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f62:	f7ff fd3b 	bl	80009dc <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fd37 	bl	80009dc <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e0c2      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f80:	4b41      	ldr	r3, [pc, #260]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ee      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f92:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a3c      	ldr	r2, [pc, #240]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 80ae 	beq.w	8001104 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa8:	4b37      	ldr	r3, [pc, #220]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d06d      	beq.n	8001090 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d14b      	bne.n	8001054 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a31      	ldr	r2, [pc, #196]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fd08 	bl	80009dc <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff fd04 	bl	80009dc <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e091      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69da      	ldr	r2, [r3, #28]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	3b01      	subs	r3, #1
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	061b      	lsls	r3, r3, #24
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	071b      	lsls	r3, r3, #28
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8001026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800102a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fcd6 	bl	80009dc <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001034:	f7ff fcd2 	bl	80009dc <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e05f      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d0f0      	beq.n	8001034 <HAL_RCC_OscConfig+0x47c>
 8001052:	e057      	b.n	8001104 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 800105a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800105e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fcbc 	bl	80009dc <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fcb8 	bl	80009dc <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e045      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_RCC_OscConfig+0x4d0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x4b0>
 8001086:	e03d      	b.n	8001104 <HAL_RCC_OscConfig+0x54c>
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_RCC_OscConfig+0x558>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d030      	beq.n	8001100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d129      	bne.n	8001100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d122      	bne.n	8001100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010c0:	4013      	ands	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d119      	bne.n	8001100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	3b01      	subs	r3, #1
 80010da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010dc:	429a      	cmp	r2, r3
 80010de:	d10f      	bne.n	8001100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d107      	bne.n	8001100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0d0      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800112c:	4b6a      	ldr	r3, [pc, #424]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d910      	bls.n	800115c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b67      	ldr	r3, [pc, #412]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 020f 	bic.w	r2, r3, #15
 8001142:	4965      	ldr	r1, [pc, #404]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0b8      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 800117a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800117e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 8001192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001196:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001198:	4b50      	ldr	r3, [pc, #320]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	494d      	ldr	r1, [pc, #308]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d040      	beq.n	8001238 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d115      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e07f      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e073      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e06b      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f023 0203 	bic.w	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4936      	ldr	r1, [pc, #216]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001208:	f7ff fbe8 	bl	80009dc <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	e00a      	b.n	8001226 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	f7ff fbe4 	bl	80009dc <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e053      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 020c 	and.w	r2, r3, #12
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	429a      	cmp	r2, r3
 8001236:	d1eb      	bne.n	8001210 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 030f 	and.w	r3, r3, #15
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d210      	bcs.n	8001268 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 020f 	bic.w	r2, r3, #15
 800124e:	4922      	ldr	r1, [pc, #136]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d001      	beq.n	8001268 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e032      	b.n	80012ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d008      	beq.n	8001286 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4916      	ldr	r1, [pc, #88]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	490e      	ldr	r1, [pc, #56]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012a6:	f000 f821 	bl	80012ec <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	490a      	ldr	r1, [pc, #40]	; (80012e0 <HAL_RCC_ClockConfig+0x1cc>)
 80012b8:	5ccb      	ldrb	r3, [r1, r3]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_RCC_ClockConfig+0x1d0>)
 80012c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_RCC_ClockConfig+0x1d4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fa20 	bl	800070c <HAL_InitTick>

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08004590 	.word	0x08004590
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80012f2:	2100      	movs	r1, #0
 80012f4:	6079      	str	r1, [r7, #4]
 80012f6:	2100      	movs	r1, #0
 80012f8:	60f9      	str	r1, [r7, #12]
 80012fa:	2100      	movs	r1, #0
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80012fe:	2100      	movs	r1, #0
 8001300:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001302:	4952      	ldr	r1, [pc, #328]	; (800144c <HAL_RCC_GetSysClockFreq+0x160>)
 8001304:	6889      	ldr	r1, [r1, #8]
 8001306:	f001 010c 	and.w	r1, r1, #12
 800130a:	2908      	cmp	r1, #8
 800130c:	d00d      	beq.n	800132a <HAL_RCC_GetSysClockFreq+0x3e>
 800130e:	2908      	cmp	r1, #8
 8001310:	f200 8094 	bhi.w	800143c <HAL_RCC_GetSysClockFreq+0x150>
 8001314:	2900      	cmp	r1, #0
 8001316:	d002      	beq.n	800131e <HAL_RCC_GetSysClockFreq+0x32>
 8001318:	2904      	cmp	r1, #4
 800131a:	d003      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x38>
 800131c:	e08e      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800131e:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <HAL_RCC_GetSysClockFreq+0x164>)
 8001320:	60bb      	str	r3, [r7, #8]
      break;
 8001322:	e08e      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_RCC_GetSysClockFreq+0x168>)
 8001326:	60bb      	str	r3, [r7, #8]
      break;
 8001328:	e08b      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800132a:	4948      	ldr	r1, [pc, #288]	; (800144c <HAL_RCC_GetSysClockFreq+0x160>)
 800132c:	6849      	ldr	r1, [r1, #4]
 800132e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001332:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001334:	4945      	ldr	r1, [pc, #276]	; (800144c <HAL_RCC_GetSysClockFreq+0x160>)
 8001336:	6849      	ldr	r1, [r1, #4]
 8001338:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800133c:	2900      	cmp	r1, #0
 800133e:	d024      	beq.n	800138a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001340:	4942      	ldr	r1, [pc, #264]	; (800144c <HAL_RCC_GetSysClockFreq+0x160>)
 8001342:	6849      	ldr	r1, [r1, #4]
 8001344:	0989      	lsrs	r1, r1, #6
 8001346:	4608      	mov	r0, r1
 8001348:	f04f 0100 	mov.w	r1, #0
 800134c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001350:	f04f 0500 	mov.w	r5, #0
 8001354:	ea00 0204 	and.w	r2, r0, r4
 8001358:	ea01 0305 	and.w	r3, r1, r5
 800135c:	493d      	ldr	r1, [pc, #244]	; (8001454 <HAL_RCC_GetSysClockFreq+0x168>)
 800135e:	fb01 f003 	mul.w	r0, r1, r3
 8001362:	2100      	movs	r1, #0
 8001364:	fb01 f102 	mul.w	r1, r1, r2
 8001368:	1844      	adds	r4, r0, r1
 800136a:	493a      	ldr	r1, [pc, #232]	; (8001454 <HAL_RCC_GetSysClockFreq+0x168>)
 800136c:	fba2 0101 	umull	r0, r1, r2, r1
 8001370:	1863      	adds	r3, r4, r1
 8001372:	4619      	mov	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	461a      	mov	r2, r3
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	f7fe ff60 	bl	8000240 <__aeabi_uldivmod>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4613      	mov	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e04a      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_RCC_GetSysClockFreq+0x160>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	099b      	lsrs	r3, r3, #6
 8001390:	461a      	mov	r2, r3
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f240 10ff 	movw	r0, #511	; 0x1ff
 800139a:	f04f 0100 	mov.w	r1, #0
 800139e:	ea02 0400 	and.w	r4, r2, r0
 80013a2:	ea03 0501 	and.w	r5, r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	014b      	lsls	r3, r1, #5
 80013b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013b8:	0142      	lsls	r2, r0, #5
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	1b00      	subs	r0, r0, r4
 80013c0:	eb61 0105 	sbc.w	r1, r1, r5
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	018b      	lsls	r3, r1, #6
 80013ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013d2:	0182      	lsls	r2, r0, #6
 80013d4:	1a12      	subs	r2, r2, r0
 80013d6:	eb63 0301 	sbc.w	r3, r3, r1
 80013da:	f04f 0000 	mov.w	r0, #0
 80013de:	f04f 0100 	mov.w	r1, #0
 80013e2:	00d9      	lsls	r1, r3, #3
 80013e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013e8:	00d0      	lsls	r0, r2, #3
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	1912      	adds	r2, r2, r4
 80013f0:	eb45 0303 	adc.w	r3, r5, r3
 80013f4:	f04f 0000 	mov.w	r0, #0
 80013f8:	f04f 0100 	mov.w	r1, #0
 80013fc:	0299      	lsls	r1, r3, #10
 80013fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001402:	0290      	lsls	r0, r2, #10
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	461a      	mov	r2, r3
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	f7fe ff14 	bl	8000240 <__aeabi_uldivmod>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4613      	mov	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_RCC_GetSysClockFreq+0x160>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	3301      	adds	r3, #1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	fbb2 f3f3 	udiv	r3, r2, r3
 8001438:	60bb      	str	r3, [r7, #8]
      break;
 800143a:	e002      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <HAL_RCC_GetSysClockFreq+0x164>)
 800143e:	60bb      	str	r3, [r7, #8]
      break;
 8001440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001442:	68bb      	ldr	r3, [r7, #8]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	00f42400 	.word	0x00f42400
 8001454:	017d7840 	.word	0x017d7840

08001458 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_RCC_GetHCLKFreq+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000

08001470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001474:	f7ff fff0 	bl	8001458 <HAL_RCC_GetHCLKFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	0a9b      	lsrs	r3, r3, #10
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	4903      	ldr	r1, [pc, #12]	; (8001494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	080045a0 	.word	0x080045a0

08001498 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	220f      	movs	r2, #15
 80014a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_GetClockConfig+0x5c>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_RCC_GetClockConfig+0x60>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 020f 	and.w	r2, r3, #15
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40023c00 	.word	0x40023c00

080014fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e049      	b.n	80015a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f841 	bl	80015aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3304      	adds	r3, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f000 fa00 	bl	8001940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d001      	beq.n	80015d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e054      	b.n	8001682 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a26      	ldr	r2, [pc, #152]	; (8001690 <HAL_TIM_Base_Start_IT+0xd0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d022      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001602:	d01d      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <HAL_TIM_Base_Start_IT+0xd4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d018      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_TIM_Base_Start_IT+0xd8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1f      	ldr	r2, [pc, #124]	; (800169c <HAL_TIM_Base_Start_IT+0xdc>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00e      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1c      	ldr	r2, [pc, #112]	; (80016a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d115      	bne.n	800166c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_TIM_Base_Start_IT+0xec>)
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d015      	beq.n	800167e <HAL_TIM_Base_Start_IT+0xbe>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d011      	beq.n	800167e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800166a:	e008      	b.n	800167e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e000      	b.n	8001680 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800167e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40010000 	.word	0x40010000
 8001694:	40000400 	.word	0x40000400
 8001698:	40000800 	.word	0x40000800
 800169c:	40000c00 	.word	0x40000c00
 80016a0:	40010400 	.word	0x40010400
 80016a4:	40014000 	.word	0x40014000
 80016a8:	40001800 	.word	0x40001800
 80016ac:	00010007 	.word	0x00010007

080016b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d122      	bne.n	800170c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d11b      	bne.n	800170c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0202 	mvn.w	r2, #2
 80016dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f905 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
 80016f8:	e005      	b.n	8001706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8f7 	bl	80018ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f908 	bl	8001916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b04      	cmp	r3, #4
 8001718:	d122      	bne.n	8001760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b04      	cmp	r3, #4
 8001726:	d11b      	bne.n	8001760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0204 	mvn.w	r2, #4
 8001730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2202      	movs	r2, #2
 8001736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f8db 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
 800174c:	e005      	b.n	800175a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f8cd 	bl	80018ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f8de 	bl	8001916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b08      	cmp	r3, #8
 800176c:	d122      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b08      	cmp	r3, #8
 800177a:	d11b      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0208 	mvn.w	r2, #8
 8001784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2204      	movs	r2, #4
 800178a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f8b1 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
 80017a0:	e005      	b.n	80017ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f8a3 	bl	80018ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f8b4 	bl	8001916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d122      	bne.n	8001808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d11b      	bne.n	8001808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0210 	mvn.w	r2, #16
 80017d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2208      	movs	r2, #8
 80017de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f887 	bl	8001902 <HAL_TIM_IC_CaptureCallback>
 80017f4:	e005      	b.n	8001802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f879 	bl	80018ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f88a 	bl	8001916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10e      	bne.n	8001834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f06f 0201 	mvn.w	r2, #1
 800182c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7fe ff30 	bl	8000694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	2b80      	cmp	r3, #128	; 0x80
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d107      	bne.n	8001860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f91a 	bl	8001a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186e:	d10e      	bne.n	800188e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187a:	2b80      	cmp	r3, #128	; 0x80
 800187c:	d107      	bne.n	800188e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f90d 	bl	8001aa8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001898:	2b40      	cmp	r3, #64	; 0x40
 800189a:	d10e      	bne.n	80018ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d107      	bne.n	80018ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f838 	bl	800192a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b20      	cmp	r3, #32
 80018c6:	d10e      	bne.n	80018e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d107      	bne.n	80018e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f06f 0220 	mvn.w	r2, #32
 80018de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f8cd 	bl	8001a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a40      	ldr	r2, [pc, #256]	; (8001a54 <TIM_Base_SetConfig+0x114>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <TIM_Base_SetConfig+0x40>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195e:	d00f      	beq.n	8001980 <TIM_Base_SetConfig+0x40>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a3d      	ldr	r2, [pc, #244]	; (8001a58 <TIM_Base_SetConfig+0x118>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00b      	beq.n	8001980 <TIM_Base_SetConfig+0x40>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a3c      	ldr	r2, [pc, #240]	; (8001a5c <TIM_Base_SetConfig+0x11c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d007      	beq.n	8001980 <TIM_Base_SetConfig+0x40>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3b      	ldr	r2, [pc, #236]	; (8001a60 <TIM_Base_SetConfig+0x120>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d003      	beq.n	8001980 <TIM_Base_SetConfig+0x40>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3a      	ldr	r2, [pc, #232]	; (8001a64 <TIM_Base_SetConfig+0x124>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d108      	bne.n	8001992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <TIM_Base_SetConfig+0x114>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d02b      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d027      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <TIM_Base_SetConfig+0x118>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d023      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <TIM_Base_SetConfig+0x11c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d01f      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <TIM_Base_SetConfig+0x120>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01b      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <TIM_Base_SetConfig+0x124>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d017      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <TIM_Base_SetConfig+0x128>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <TIM_Base_SetConfig+0x12c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00f      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <TIM_Base_SetConfig+0x130>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00b      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a25      	ldr	r2, [pc, #148]	; (8001a74 <TIM_Base_SetConfig+0x134>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <TIM_Base_SetConfig+0x138>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_Base_SetConfig+0xb2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <TIM_Base_SetConfig+0x13c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d108      	bne.n	8001a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <TIM_Base_SetConfig+0x114>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d003      	beq.n	8001a38 <TIM_Base_SetConfig+0xf8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <TIM_Base_SetConfig+0x124>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d103      	bne.n	8001a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	615a      	str	r2, [r3, #20]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40000800 	.word	0x40000800
 8001a60:	40000c00 	.word	0x40000c00
 8001a64:	40010400 	.word	0x40010400
 8001a68:	40014000 	.word	0x40014000
 8001a6c:	40014400 	.word	0x40014400
 8001a70:	40014800 	.word	0x40014800
 8001a74:	40001800 	.word	0x40001800
 8001a78:	40001c00 	.word	0x40001c00
 8001a7c:	40002000 	.word	0x40002000

08001a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f103 0208 	add.w	r2, r3, #8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f103 0208 	add.w	r2, r3, #8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0208 	add.w	r2, r3, #8
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d103      	bne.n	8001b36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e00c      	b.n	8001b50 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3308      	adds	r3, #8
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e002      	b.n	8001b44 <vListInsert+0x2e>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d2f6      	bcs.n	8001b3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6892      	ldr	r2, [r2, #8]
 8001b9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6852      	ldr	r2, [r2, #4]
 8001ba8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d103      	bne.n	8001bbc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1e5a      	subs	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001be6:	2301      	movs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d052      	beq.n	8001c9a <xQueueGenericReset+0xbe>
        ( pxQueue->uxLength >= 1U ) &&
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d04e      	beq.n	8001c9a <xQueueGenericReset+0xbe>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c04:	2100      	movs	r1, #0
 8001c06:	fba3 2302 	umull	r2, r3, r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d000      	beq.n	8001c10 <xQueueGenericReset+0x34>
 8001c0e:	2101      	movs	r1, #1
 8001c10:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d141      	bne.n	8001c9a <xQueueGenericReset+0xbe>
    {
        taskENTER_CRITICAL();
 8001c16:	f001 fcff 	bl	8003618 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	441a      	add	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2200      	movs	r2, #0
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	3b01      	subs	r3, #1
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	441a      	add	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	22ff      	movs	r2, #255	; 0xff
 8001c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	22ff      	movs	r2, #255	; 0xff
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <xQueueGenericReset+0xa4>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00f      	beq.n	8001c94 <xQueueGenericReset+0xb8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3310      	adds	r3, #16
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fecf 	bl	8002a1c <xTaskRemoveFromEventList>
 8001c7e:	e009      	b.n	8001c94 <xQueueGenericReset+0xb8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3310      	adds	r3, #16
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff19 	bl	8001abc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3324      	adds	r3, #36	; 0x24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff14 	bl	8001abc <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8001c94:	f001 fcdc 	bl	8003650 <vPortExitCritical>
 8001c98:	e001      	b.n	8001c9e <xQueueGenericReset+0xc2>
    }
    else
    {
        xReturn = pdFAIL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]

    configASSERT( xReturn != pdFAIL );

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d02d      	beq.n	8001d1c <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d000      	beq.n	8001cd0 <xQueueGenericCreate+0x28>
 8001cce:	2101      	movs	r1, #1
 8001cd0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d122      	bne.n	8001d1c <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001cde:	f113 0f55 	cmn.w	r3, #85	; 0x55
 8001ce2:	d81b      	bhi.n	8001d1c <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	3354      	adds	r3, #84	; 0x54
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 fd54 	bl	80037a0 <pvPortMalloc>
 8001cf8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3354      	adds	r3, #84	; 0x54
 8001d08:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d0a:	79fa      	ldrb	r2, [r7, #7]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f805 	bl	8001d26 <prvInitialiseNewQueue>
        {
            configASSERT( pxNewQueue );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
    }
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e002      	b.n	8001d48 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d54:	2101      	movs	r1, #1
 8001d56:	69b8      	ldr	r0, [r7, #24]
 8001d58:	f7ff ff40 	bl	8001bdc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2200      	movs	r2, #0
 8001d68:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	623b      	str	r3, [r7, #32]
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001d88:	f001 fc46 	bl	8003618 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d014      	beq.n	8001dc2 <xQueueReceive+0x4e>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6a38      	ldr	r0, [r7, #32]
 8001d9c:	f000 f8ec 	bl	8001f78 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	1e5a      	subs	r2, r3, #1
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <xQueueReceive+0x46>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	3310      	adds	r3, #16
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fe31 	bl	8002a1c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001dba:	f001 fc49 	bl	8003650 <vPortExitCritical>
                return pdPASS;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e069      	b.n	8001e96 <xQueueReceive+0x122>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <xQueueReceive+0x5c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001dc8:	f001 fc42 	bl	8003650 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e062      	b.n	8001e96 <xQueueReceive+0x122>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <xQueueReceive+0x70>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fee6 	bl	8002bac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001de4:	f001 fc34 	bl	8003650 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001de8:	f000 fba4 	bl	8002534 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001dec:	f001 fc14 	bl	8003618 <vPortEnterCritical>
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d103      	bne.n	8001e06 <xQueueReceive+0x92>
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d103      	bne.n	8001e1c <xQueueReceive+0xa8>
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e1c:	f001 fc18 	bl	8003650 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e20:	1d3a      	adds	r2, r7, #4
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fed5 	bl	8002bd8 <xTaskCheckForTimeOut>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d123      	bne.n	8001e7c <xQueueReceive+0x108>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e34:	6a38      	ldr	r0, [r7, #32]
 8001e36:	f000 f924 	bl	8002082 <prvIsQueueEmpty>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <xQueueReceive+0xfc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	3324      	adds	r3, #36	; 0x24
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fd99 	bl	8002980 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001e4e:	6a38      	ldr	r0, [r7, #32]
 8001e50:	f000 f8b8 	bl	8001fc4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001e54:	f000 fb7c 	bl	8002550 <xTaskResumeAll>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d194      	bne.n	8001d88 <xQueueReceive+0x14>
                {
                    portYIELD_WITHIN_API();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <xQueueReceive+0x12c>)
 8001e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	e78b      	b.n	8001d88 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001e70:	6a38      	ldr	r0, [r7, #32]
 8001e72:	f000 f8a7 	bl	8001fc4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e76:	f000 fb6b 	bl	8002550 <xTaskResumeAll>
 8001e7a:	e785      	b.n	8001d88 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001e7c:	6a38      	ldr	r0, [r7, #32]
 8001e7e:	f000 f8a1 	bl	8001fc4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e82:	f000 fb65 	bl	8002550 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e86:	6a38      	ldr	r0, [r7, #32]
 8001e88:	f000 f8fb 	bl	8002082 <prvIsQueueEmpty>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f43f af7a 	beq.w	8001d88 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001e94:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000ed04 	.word	0xe000ed04

08001ea4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d14d      	bne.n	8001f66 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 ff84 	bl	8002ddc <xTaskPriorityDisinherit>
 8001ed4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	e043      	b.n	8001f66 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d119      	bne.n	8001f18 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6858      	ldr	r0, [r3, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	461a      	mov	r2, r3
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	f001 fe24 	bl	8003b3c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	441a      	add	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d32b      	bcc.n	8001f66 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	e026      	b.n	8001f66 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68d8      	ldr	r0, [r3, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	461a      	mov	r2, r3
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	f001 fe0a 	bl	8003b3c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	425b      	negs	r3, r3
 8001f32:	441a      	add	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	441a      	add	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d105      	bne.n	8001f66 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001f6e:	697b      	ldr	r3, [r7, #20]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d018      	beq.n	8001fbc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	441a      	add	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d303      	bcc.n	8001fac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68d9      	ldr	r1, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	f001 fdc0 	bl	8003b3c <memcpy>
    }
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001fcc:	f001 fb24 	bl	8003618 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fd6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fd8:	e01e      	b.n	8002018 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8d8 	bl	8002198 <prvNotifyQueueSetContainer>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8001fee:	f000 fe3d 	bl	8002c6c <vTaskMissedYield>
 8001ff2:	e00d      	b.n	8002010 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3324      	adds	r3, #36	; 0x24
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fd0b 	bl	8002a1c <xTaskRemoveFromEventList>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 800200c:	f000 fe2e 	bl	8002c6c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3b01      	subs	r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201c:	2b00      	cmp	r3, #0
 800201e:	dcdc      	bgt.n	8001fda <prvUnlockQueue+0x16>
 8002020:	e000      	b.n	8002024 <prvUnlockQueue+0x60>
                            break;
 8002022:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	22ff      	movs	r2, #255	; 0xff
 8002028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800202c:	f001 fb10 	bl	8003650 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002030:	f001 faf2 	bl	8003618 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800203a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800203c:	e011      	b.n	8002062 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d012      	beq.n	800206c <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3310      	adds	r3, #16
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fce6 	bl	8002a1c <xTaskRemoveFromEventList>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002056:	f000 fe09 	bl	8002c6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800205a:	7bbb      	ldrb	r3, [r7, #14]
 800205c:	3b01      	subs	r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002066:	2b00      	cmp	r3, #0
 8002068:	dce9      	bgt.n	800203e <prvUnlockQueue+0x7a>
 800206a:	e000      	b.n	800206e <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 800206c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	22ff      	movs	r2, #255	; 0xff
 8002072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002076:	f001 faeb 	bl	8003650 <vPortExitCritical>
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800208a:	f001 fac5 	bl	8003618 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002096:	2301      	movs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e001      	b.n	80020a0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80020a0:	f001 fad6 	bl	8003650 <vPortExitCritical>

    return xReturn;
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d024      	beq.n	800210e <vQueueAddToRegistry+0x5e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e01e      	b.n	8002108 <vQueueAddToRegistry+0x58>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80020ca:	4a18      	ldr	r2, [pc, #96]	; (800212c <vQueueAddToRegistry+0x7c>)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d105      	bne.n	80020e6 <vQueueAddToRegistry+0x36>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <vQueueAddToRegistry+0x7c>)
 80020e0:	4413      	add	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
                    break;
 80020e4:	e013      	b.n	800210e <vQueueAddToRegistry+0x5e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <vQueueAddToRegistry+0x52>
 80020ec:	4a0f      	ldr	r2, [pc, #60]	; (800212c <vQueueAddToRegistry+0x7c>)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d104      	bne.n	8002102 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4a0b      	ldr	r2, [pc, #44]	; (800212c <vQueueAddToRegistry+0x7c>)
 80020fe:	4413      	add	r3, r2
 8002100:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	3301      	adds	r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b07      	cmp	r3, #7
 800210c:	d9dd      	bls.n	80020ca <vQueueAddToRegistry+0x1a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <vQueueAddToRegistry+0x70>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	2000ba50 	.word	0x2000ba50

08002130 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002140:	f001 fa6a 	bl	8003618 <vPortEnterCritical>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800214a:	b25b      	sxtb	r3, r3
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d103      	bne.n	800215a <vQueueWaitForMessageRestricted+0x2a>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002160:	b25b      	sxtb	r3, r3
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002166:	d103      	bne.n	8002170 <vQueueWaitForMessageRestricted+0x40>
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002170:	f001 fa6e 	bl	8003650 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	2b00      	cmp	r3, #0
 800217a:	d106      	bne.n	800218a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3324      	adds	r3, #36	; 0x24
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fc11 	bl	80029ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff1a 	bl	8001fc4 <prvUnlockQueue>
    }
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a4:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d225      	bcs.n	8002202 <prvNotifyQueueSetContainer+0x6a>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021bc:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	6938      	ldr	r0, [r7, #16]
 80021c6:	f7ff fe6d 	bl	8001ea4 <prvCopyDataToQueue>
 80021ca:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 80021cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d10e      	bne.n	80021f4 <prvNotifyQueueSetContainer+0x5c>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <prvNotifyQueueSetContainer+0x6a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	3324      	adds	r3, #36	; 0x24
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fc1a 	bl	8002a1c <xTaskRemoveFromEventList>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <prvNotifyQueueSetContainer+0x6a>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e006      	b.n	8002202 <prvNotifyQueueSetContainer+0x6a>
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	b25a      	sxtb	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002202:	697b      	ldr	r3, [r7, #20]
    }
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af04      	add	r7, sp, #16
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	4613      	mov	r3, r2
 800221a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fabd 	bl	80037a0 <pvPortMalloc>
 8002226:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00e      	beq.n	800224c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800222e:	2058      	movs	r0, #88	; 0x58
 8002230:	f001 fab6 	bl	80037a0 <pvPortMalloc>
 8002234:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
 8002242:	e005      	b.n	8002250 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f001 fb59 	bl	80038fc <vPortFree>
 800224a:	e001      	b.n	8002250 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d013      	beq.n	800227e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	2300      	movs	r3, #0
 800225a:	9303      	str	r3, [sp, #12]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f80e 	bl	800228e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002272:	69f8      	ldr	r0, [r7, #28]
 8002274:	f000 f892 	bl	800239c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002278:	2301      	movs	r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	e002      	b.n	8002284 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002284:	69bb      	ldr	r3, [r7, #24]
    }
 8002286:	4618      	mov	r0, r3
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	461a      	mov	r2, r3
 80022a6:	21a5      	movs	r1, #165	; 0xa5
 80022a8:	f001 fc56 	bl	8003b58 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80022b6:	440b      	add	r3, r1
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f023 0307 	bic.w	r3, r3, #7
 80022c4:	613b      	str	r3, [r7, #16]
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01f      	beq.n	800230c <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e012      	b.n	80022f8 <prvInitialiseNewTask+0x6a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4413      	add	r3, r2
 80022d8:	7819      	ldrb	r1, [r3, #0]
 80022da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	4413      	add	r3, r2
 80022e0:	3334      	adds	r3, #52	; 0x34
 80022e2:	460a      	mov	r2, r1
 80022e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <prvInitialiseNewTask+0x72>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3301      	adds	r3, #1
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d9e9      	bls.n	80022d2 <prvInitialiseNewTask+0x44>
 80022fe:	e000      	b.n	8002302 <prvInitialiseNewTask+0x74>
            {
                break;
 8002300:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800230a:	e003      	b.n	8002314 <prvInitialiseNewTask+0x86>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	2b04      	cmp	r3, #4
 8002318:	d901      	bls.n	800231e <prvInitialiseNewTask+0x90>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800231a:	2304      	movs	r3, #4
 800231c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	6a3a      	ldr	r2, [r7, #32]
 8002328:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	2200      	movs	r2, #0
 800232e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	3304      	adds	r3, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fbe1 	bl	8001afc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	3318      	adds	r3, #24
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fbdc 	bl	8001afc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002348:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f1c3 0205 	rsb	r2, r3, #5
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	3350      	adds	r3, #80	; 0x50
 800235e:	2204      	movs	r2, #4
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fbf8 	bl	8003b58 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	3354      	adds	r3, #84	; 0x54
 800236c:	2201      	movs	r2, #1
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f001 fbf1 	bl	8003b58 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	6938      	ldr	r0, [r7, #16]
 800237c:	f001 f8a4 	bl	80034c8 <pxPortInitialiseStack>
 8002380:	4602      	mov	r2, r0
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002390:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023a4:	f001 f938 	bl	8003618 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <prvAddNewTaskToReadyList+0xf8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a39      	ldr	r2, [pc, #228]	; (8002494 <prvAddNewTaskToReadyList+0xf8>)
 80023b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023ba:	4a37      	ldr	r2, [pc, #220]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <prvAddNewTaskToReadyList+0xf8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d110      	bne.n	80023ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023c8:	f000 fc6e 	bl	8002ca8 <prvInitialiseTaskLists>
 80023cc:	e00d      	b.n	80023ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023ce:	4b33      	ldr	r3, [pc, #204]	; (800249c <prvAddNewTaskToReadyList+0x100>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d802      	bhi.n	80023ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023e4:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <prvAddNewTaskToReadyList+0x104>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <prvAddNewTaskToReadyList+0x104>)
 80023f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <prvAddNewTaskToReadyList+0x104>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <prvAddNewTaskToReadyList+0x108>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <prvAddNewTaskToReadyList+0x108>)
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002412:	4925      	ldr	r1, [pc, #148]	; (80024a8 <prvAddNewTaskToReadyList+0x10c>)
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	3204      	adds	r2, #4
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <prvAddNewTaskToReadyList+0x10c>)
 8002452:	441a      	add	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245c:	4912      	ldr	r1, [pc, #72]	; (80024a8 <prvAddNewTaskToReadyList+0x10c>)
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	480e      	ldr	r0, [pc, #56]	; (80024a8 <prvAddNewTaskToReadyList+0x10c>)
 800246e:	4613      	mov	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4403      	add	r3, r0
 8002478:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800247a:	f001 f8e9 	bl	8003650 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <prvAddNewTaskToReadyList+0x100>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002486:	4b04      	ldr	r3, [pc, #16]	; (8002498 <prvAddNewTaskToReadyList+0xfc>)
 8002488:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000016c 	.word	0x2000016c
 8002498:	20000094 	.word	0x20000094
 800249c:	20000178 	.word	0x20000178
 80024a0:	20000188 	.word	0x20000188
 80024a4:	20000174 	.word	0x20000174
 80024a8:	20000098 	.word	0x20000098

080024ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80024b2:	4b19      	ldr	r3, [pc, #100]	; (8002518 <vTaskStartScheduler+0x6c>)
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	2300      	movs	r3, #0
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2300      	movs	r3, #0
 80024bc:	2282      	movs	r2, #130	; 0x82
 80024be:	4917      	ldr	r1, [pc, #92]	; (800251c <vTaskStartScheduler+0x70>)
 80024c0:	4817      	ldr	r0, [pc, #92]	; (8002520 <vTaskStartScheduler+0x74>)
 80024c2:	f7ff fea3 	bl	800220c <xTaskCreate>
 80024c6:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80024ce:	f000 fd87 	bl	8002fe0 <xTimerCreateTimerTask>
 80024d2:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d117      	bne.n	800250a <vTaskStartScheduler+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80024da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80024de:	b672      	cpsid	i
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	b662      	cpsie	i
 80024ee:	603b      	str	r3, [r7, #0]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80024f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <vTaskStartScheduler+0x78>)
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <vTaskStartScheduler+0x7c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <vTaskStartScheduler+0x80>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002506:	f001 f85d 	bl	80035c4 <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <vTaskStartScheduler+0x84>)
 800250c:	681b      	ldr	r3, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000190 	.word	0x20000190
 800251c:	08004568 	.word	0x08004568
 8002520:	08002c85 	.word	0x08002c85
 8002524:	2000018c 	.word	0x2000018c
 8002528:	20000178 	.word	0x20000178
 800252c:	20000170 	.word	0x20000170
 8002530:	2000000c 	.word	0x2000000c

08002534 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <vTaskSuspendAll+0x18>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3301      	adds	r3, #1
 800253e:	4a03      	ldr	r2, [pc, #12]	; (800254c <vTaskSuspendAll+0x18>)
 8002540:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20000194 	.word	0x20000194

08002550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800255e:	f001 f85b 	bl	8003618 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002562:	4b62      	ldr	r3, [pc, #392]	; (80026ec <xTaskResumeAll+0x19c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3b01      	subs	r3, #1
 8002568:	4a60      	ldr	r2, [pc, #384]	; (80026ec <xTaskResumeAll+0x19c>)
 800256a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800256c:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <xTaskResumeAll+0x19c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f040 80b4 	bne.w	80026de <xTaskResumeAll+0x18e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002576:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <xTaskResumeAll+0x1a0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80af 	beq.w	80026de <xTaskResumeAll+0x18e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002580:	e08a      	b.n	8002698 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002582:	4b5c      	ldr	r3, [pc, #368]	; (80026f4 <xTaskResumeAll+0x1a4>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	6a12      	ldr	r2, [r2, #32]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	69d2      	ldr	r2, [r2, #28]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3318      	adds	r3, #24
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d103      	bne.n	80025b8 <xTaskResumeAll+0x68>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2200      	movs	r2, #0
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	1e5a      	subs	r2, r3, #1
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	68d2      	ldr	r2, [r2, #12]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	6892      	ldr	r2, [r2, #8]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3304      	adds	r3, #4
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d103      	bne.n	80025f6 <xTaskResumeAll+0xa6>
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	2201      	movs	r2, #1
 800260c:	409a      	lsls	r2, r3
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <xTaskResumeAll+0x1a8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <xTaskResumeAll+0x1a8>)
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261c:	4937      	ldr	r1, [pc, #220]	; (80026fc <xTaskResumeAll+0x1ac>)
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	3204      	adds	r2, #4
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1d1a      	adds	r2, r3, #4
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4a28      	ldr	r2, [pc, #160]	; (80026fc <xTaskResumeAll+0x1ac>)
 800265c:	441a      	add	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	615a      	str	r2, [r3, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002666:	4925      	ldr	r1, [pc, #148]	; (80026fc <xTaskResumeAll+0x1ac>)
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	1c59      	adds	r1, r3, #1
 8002676:	4821      	ldr	r0, [pc, #132]	; (80026fc <xTaskResumeAll+0x1ac>)
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4403      	add	r3, r0
 8002682:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <xTaskResumeAll+0x1b0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <xTaskResumeAll+0x1b4>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <xTaskResumeAll+0x1a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	f47f af70 	bne.w	8002582 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026a8:	f000 fb7c 	bl	8002da4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <xTaskResumeAll+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	613b      	str	r3, [r7, #16]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026b8:	f000 f838 	bl	800272c <xTaskIncrementTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <xTaskResumeAll+0x1b4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	613b      	str	r3, [r7, #16]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f1      	bne.n	80026b8 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <xTaskResumeAll+0x1b8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <xTaskResumeAll+0x1b4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026de:	f000 ffb7 	bl	8003650 <vPortExitCritical>

    return xAlreadyYielded;
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000194 	.word	0x20000194
 80026f0:	2000016c 	.word	0x2000016c
 80026f4:	2000012c 	.word	0x2000012c
 80026f8:	20000174 	.word	0x20000174
 80026fc:	20000098 	.word	0x20000098
 8002700:	20000094 	.word	0x20000094
 8002704:	20000180 	.word	0x20000180
 8002708:	2000017c 	.word	0x2000017c

0800270c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <xTaskGetTickCount+0x1c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000170 	.word	0x20000170

0800272c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002736:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <xTaskIncrementTick+0x1a4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 80bd 	bne.w	80028ba <xTaskIncrementTick+0x18e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002740:	4b64      	ldr	r3, [pc, #400]	; (80028d4 <xTaskIncrementTick+0x1a8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002748:	4a62      	ldr	r2, [pc, #392]	; (80028d4 <xTaskIncrementTick+0x1a8>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d110      	bne.n	8002776 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002754:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <xTaskIncrementTick+0x1ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <xTaskIncrementTick+0x1b0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a5e      	ldr	r2, [pc, #376]	; (80028d8 <xTaskIncrementTick+0x1ac>)
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <xTaskIncrementTick+0x1b0>)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <xTaskIncrementTick+0x1b4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <xTaskIncrementTick+0x1b4>)
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	f000 fb17 	bl	8002da4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002776:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <xTaskIncrementTick+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	429a      	cmp	r2, r3
 800277e:	f0c0 80a1 	bcc.w	80028c4 <xTaskIncrementTick+0x198>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002782:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <xTaskIncrementTick+0x1ac>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d104      	bne.n	8002796 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800278c:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <xTaskIncrementTick+0x1b8>)
 800278e:	f04f 32ff 	mov.w	r2, #4294967295
 8002792:	601a      	str	r2, [r3, #0]
                    break;
 8002794:	e096      	b.n	80028c4 <xTaskIncrementTick+0x198>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002796:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <xTaskIncrementTick+0x1ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d203      	bcs.n	80027b6 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027ae:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <xTaskIncrementTick+0x1b8>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80027b4:	e086      	b.n	80028c4 <xTaskIncrementTick+0x198>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68d2      	ldr	r2, [r2, #12]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	6892      	ldr	r2, [r2, #8]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	3304      	adds	r3, #4
 80027d8:	429a      	cmp	r2, r3
 80027da:	d103      	bne.n	80027e4 <xTaskIncrementTick+0xb8>
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01e      	beq.n	800283a <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	6a12      	ldr	r2, [r2, #32]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	69d2      	ldr	r2, [r2, #28]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3318      	adds	r3, #24
 800281e:	429a      	cmp	r2, r3
 8002820:	d103      	bne.n	800282a <xTaskIncrementTick+0xfe>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	2201      	movs	r2, #1
 8002840:	409a      	lsls	r2, r3
 8002842:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <xTaskIncrementTick+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4313      	orrs	r3, r2
 8002848:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <xTaskIncrementTick+0x1bc>)
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	4926      	ldr	r1, [pc, #152]	; (80028ec <xTaskIncrementTick+0x1c0>)
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3304      	adds	r3, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	3204      	adds	r2, #4
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a17      	ldr	r2, [pc, #92]	; (80028ec <xTaskIncrementTick+0x1c0>)
 8002890:	441a      	add	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	615a      	str	r2, [r3, #20]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4914      	ldr	r1, [pc, #80]	; (80028ec <xTaskIncrementTick+0x1c0>)
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1c59      	adds	r1, r3, #1
 80028aa:	4810      	ldr	r0, [pc, #64]	; (80028ec <xTaskIncrementTick+0x1c0>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4403      	add	r3, r0
 80028b6:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028b8:	e763      	b.n	8002782 <xTaskIncrementTick+0x56>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <xTaskIncrementTick+0x1c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <xTaskIncrementTick+0x1c4>)
 80028c2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028c4:	69fb      	ldr	r3, [r7, #28]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000194 	.word	0x20000194
 80028d4:	20000170 	.word	0x20000170
 80028d8:	20000124 	.word	0x20000124
 80028dc:	20000128 	.word	0x20000128
 80028e0:	20000184 	.word	0x20000184
 80028e4:	2000018c 	.word	0x2000018c
 80028e8:	20000174 	.word	0x20000174
 80028ec:	20000098 	.word	0x20000098
 80028f0:	2000017c 	.word	0x2000017c

080028f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <vTaskSwitchContext+0x78>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <vTaskSwitchContext+0x7c>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002908:	e02a      	b.n	8002960 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <vTaskSwitchContext+0x7c>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <vTaskSwitchContext+0x80>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f1c3 031f 	rsb	r3, r3, #31
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <vTaskSwitchContext+0x84>)
 8002932:	4413      	add	r3, r2
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	3308      	adds	r3, #8
 8002948:	429a      	cmp	r2, r3
 800294a:	d104      	bne.n	8002956 <vTaskSwitchContext+0x62>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <vTaskSwitchContext+0x88>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	20000194 	.word	0x20000194
 8002970:	20000180 	.word	0x20000180
 8002974:	20000174 	.word	0x20000174
 8002978:	20000098 	.word	0x20000098
 800297c:	20000094 	.word	0x20000094

08002980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <vTaskPlaceOnEventList+0x28>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3318      	adds	r3, #24
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff f8bf 	bl	8001b16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002998:	2101      	movs	r1, #1
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f000 faa0 	bl	8002ee0 <prvAddCurrentTaskToDelayedList>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000094 	.word	0x20000094

080029ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <vTaskPlaceOnEventListRestricted+0x6c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	61da      	str	r2, [r3, #28]
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <vTaskPlaceOnEventListRestricted+0x6c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	621a      	str	r2, [r3, #32]
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <vTaskPlaceOnEventListRestricted+0x6c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	3218      	adds	r2, #24
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <vTaskPlaceOnEventListRestricted+0x6c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f103 0218 	add.w	r2, r3, #24
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <vTaskPlaceOnEventListRestricted+0x6c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	f000 fa69 	bl	8002ee0 <prvAddCurrentTaskToDelayedList>
    }
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000094 	.word	0x20000094

08002a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	6a12      	ldr	r2, [r2, #32]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	69d2      	ldr	r2, [r2, #28]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d103      	bne.n	8002a5a <xTaskRemoveFromEventList+0x3e>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	1e5a      	subs	r2, r3, #1
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a6a:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <xTaskRemoveFromEventList+0x178>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d15e      	bne.n	8002b30 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	68d2      	ldr	r2, [r2, #12]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	6892      	ldr	r2, [r2, #8]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	3304      	adds	r3, #4
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d103      	bne.n	8002aa0 <xTaskRemoveFromEventList+0x84>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	615a      	str	r2, [r3, #20]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <xTaskRemoveFromEventList+0x17c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	4a36      	ldr	r2, [pc, #216]	; (8002b98 <xTaskRemoveFromEventList+0x17c>)
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac6:	4935      	ldr	r1, [pc, #212]	; (8002b9c <xTaskRemoveFromEventList+0x180>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	3204      	adds	r2, #4
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1d1a      	adds	r2, r3, #4
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <xTaskRemoveFromEventList+0x180>)
 8002b06:	441a      	add	r2, r3
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	615a      	str	r2, [r3, #20]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	4922      	ldr	r1, [pc, #136]	; (8002b9c <xTaskRemoveFromEventList+0x180>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	481e      	ldr	r0, [pc, #120]	; (8002b9c <xTaskRemoveFromEventList+0x180>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	6019      	str	r1, [r3, #0]
 8002b2e:	e01b      	b.n	8002b68 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <xTaskRemoveFromEventList+0x184>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	61da      	str	r2, [r3, #28]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	621a      	str	r2, [r3, #32]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	3218      	adds	r2, #24
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f103 0218 	add.w	r2, r3, #24
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <xTaskRemoveFromEventList+0x184>)
 8002b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <xTaskRemoveFromEventList+0x184>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <xTaskRemoveFromEventList+0x184>)
 8002b66:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <xTaskRemoveFromEventList+0x188>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d905      	bls.n	8002b82 <xTaskRemoveFromEventList+0x166>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <xTaskRemoveFromEventList+0x18c>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e001      	b.n	8002b86 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        xReturn = pdFALSE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8002b86:	69fb      	ldr	r3, [r7, #28]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3724      	adds	r7, #36	; 0x24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	20000194 	.word	0x20000194
 8002b98:	20000174 	.word	0x20000174
 8002b9c:	20000098 	.word	0x20000098
 8002ba0:	2000012c 	.word	0x2000012c
 8002ba4:	20000094 	.word	0x20000094
 8002ba8:	20000180 	.word	0x20000180

08002bac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <vTaskInternalSetTimeOutState+0x24>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <vTaskInternalSetTimeOutState+0x28>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	605a      	str	r2, [r3, #4]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	20000184 	.word	0x20000184
 8002bd4:	20000170 	.word	0x20000170

08002bd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8002be2:	f000 fd19 	bl	8003618 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002be6:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <xTaskCheckForTimeOut+0x8c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d102      	bne.n	8002c06 <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e026      	b.n	8002c54 <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <xTaskCheckForTimeOut+0x90>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d00a      	beq.n	8002c28 <xTaskCheckForTimeOut+0x50>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d305      	bcc.n	8002c28 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e015      	b.n	8002c54 <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d20b      	bcs.n	8002c4a <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad2      	subs	r2, r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffb4 	bl	8002bac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e004      	b.n	8002c54 <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002c54:	f000 fcfc 	bl	8003650 <vPortExitCritical>

    return xReturn;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000170 	.word	0x20000170
 8002c68:	20000184 	.word	0x20000184

08002c6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <vTaskMissedYield+0x14>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	20000180 	.word	0x20000180

08002c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c8c:	f000 f84c 	bl	8002d28 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <prvIdleTask+0x20>)
 8002c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ca0:	e7f4      	b.n	8002c8c <prvIdleTask+0x8>
 8002ca2:	bf00      	nop
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	e00c      	b.n	8002cce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <prvInitialiseTaskLists+0x60>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fefa 	bl	8001abc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d9ef      	bls.n	8002cb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <prvInitialiseTaskLists+0x64>)
 8002cd6:	f7fe fef1 	bl	8001abc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002cda:	480d      	ldr	r0, [pc, #52]	; (8002d10 <prvInitialiseTaskLists+0x68>)
 8002cdc:	f7fe feee 	bl	8001abc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ce0:	480c      	ldr	r0, [pc, #48]	; (8002d14 <prvInitialiseTaskLists+0x6c>)
 8002ce2:	f7fe feeb 	bl	8001abc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002ce6:	480c      	ldr	r0, [pc, #48]	; (8002d18 <prvInitialiseTaskLists+0x70>)
 8002ce8:	f7fe fee8 	bl	8001abc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002cec:	480b      	ldr	r0, [pc, #44]	; (8002d1c <prvInitialiseTaskLists+0x74>)
 8002cee:	f7fe fee5 	bl	8001abc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <prvInitialiseTaskLists+0x78>)
 8002cf4:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <prvInitialiseTaskLists+0x64>)
 8002cf6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <prvInitialiseTaskLists+0x7c>)
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <prvInitialiseTaskLists+0x68>)
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000098 	.word	0x20000098
 8002d0c:	200000fc 	.word	0x200000fc
 8002d10:	20000110 	.word	0x20000110
 8002d14:	2000012c 	.word	0x2000012c
 8002d18:	20000140 	.word	0x20000140
 8002d1c:	20000158 	.word	0x20000158
 8002d20:	20000124 	.word	0x20000124
 8002d24:	20000128 	.word	0x20000128

08002d28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d2e:	e019      	b.n	8002d64 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d30:	f000 fc72 	bl	8003618 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <prvCheckTasksWaitingTermination+0x50>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe ff21 	bl	8001b88 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <prvCheckTasksWaitingTermination+0x54>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <prvCheckTasksWaitingTermination+0x54>)
 8002d4e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <prvCheckTasksWaitingTermination+0x58>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <prvCheckTasksWaitingTermination+0x58>)
 8002d58:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d5a:	f000 fc79 	bl	8003650 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f810 	bl	8002d84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <prvCheckTasksWaitingTermination+0x58>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e1      	bne.n	8002d30 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000140 	.word	0x20000140
 8002d7c:	2000016c 	.word	0x2000016c
 8002d80:	20000154 	.word	0x20000154

08002d84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fdb3 	bl	80038fc <vPortFree>
                vPortFree( pxTCB );
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fdb0 	bl	80038fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <prvResetNextTaskUnblockTime+0x30>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <prvResetNextTaskUnblockTime+0x34>)
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002dba:	e005      	b.n	8002dc8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <prvResetNextTaskUnblockTime+0x30>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <prvResetNextTaskUnblockTime+0x34>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000124 	.word	0x20000124
 8002dd8:	2000018c 	.word	0x2000018c

08002ddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d06c      	beq.n	8002ecc <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	1e5a      	subs	r2, r3, #1
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d061      	beq.n	8002ecc <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d15d      	bne.n	8002ecc <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe feb7 	bl	8001b88 <uxListRemove>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	2201      	movs	r2, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <xTaskPriorityDisinherit+0xfc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4013      	ands	r3, r2
 8002e32:	4a29      	ldr	r2, [pc, #164]	; (8002ed8 <xTaskPriorityDisinherit+0xfc>)
 8002e34:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	f1c3 0205 	rsb	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	2201      	movs	r2, #1
 8002e50:	409a      	lsls	r2, r3
 8002e52:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <xTaskPriorityDisinherit+0xfc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <xTaskPriorityDisinherit+0xfc>)
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	491e      	ldr	r1, [pc, #120]	; (8002edc <xTaskPriorityDisinherit+0x100>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	3204      	adds	r2, #4
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1d1a      	adds	r2, r3, #4
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <xTaskPriorityDisinherit+0x100>)
 8002ea0:	441a      	add	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	615a      	str	r2, [r3, #20]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	490c      	ldr	r1, [pc, #48]	; (8002edc <xTaskPriorityDisinherit+0x100>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	1c59      	adds	r1, r3, #1
 8002eba:	4808      	ldr	r0, [pc, #32]	; (8002edc <xTaskPriorityDisinherit+0x100>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002ecc:	697b      	ldr	r3, [r7, #20]
    }
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000174 	.word	0x20000174
 8002edc:	20000098 	.word	0x20000098

08002ee0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002eea:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fe46 	bl	8001b88 <uxListRemove>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	2201      	movs	r2, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4013      	ands	r3, r2
 8002f16:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <prvAddCurrentTaskToDelayedList+0xec>)
 8002f18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d124      	bne.n	8002f6c <prvAddCurrentTaskToDelayedList+0x8c>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d021      	beq.n	8002f6c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	4b26      	ldr	r3, [pc, #152]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	6892      	ldr	r2, [r2, #8]
 8002f3e:	60da      	str	r2, [r3, #12]
 8002f40:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	3204      	adds	r2, #4
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	1d1a      	adds	r2, r3, #4
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f5c:	615a      	str	r2, [r3, #20]
 8002f5e:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f6a:	e026      	b.n	8002fba <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f74:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d209      	bcs.n	8002f98 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f7fe fdc0 	bl	8001b16 <vListInsert>
}
 8002f96:	e010      	b.n	8002fba <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7fe fdb6 	bl	8001b16 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002faa:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d202      	bcs.n	8002fba <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8002fb4:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <prvAddCurrentTaskToDelayedList+0xfc>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6013      	str	r3, [r2, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000170 	.word	0x20000170
 8002fc8:	20000094 	.word	0x20000094
 8002fcc:	20000174 	.word	0x20000174
 8002fd0:	20000158 	.word	0x20000158
 8002fd4:	20000128 	.word	0x20000128
 8002fd8:	20000124 	.word	0x20000124
 8002fdc:	2000018c 	.word	0x2000018c

08002fe0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002fea:	f000 fa37 	bl	800345c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <xTimerCreateTimerTask+0x38>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <xTimerCreateTimerTask+0x3c>)
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003004:	4906      	ldr	r1, [pc, #24]	; (8003020 <xTimerCreateTimerTask+0x40>)
 8003006:	4807      	ldr	r0, [pc, #28]	; (8003024 <xTimerCreateTimerTask+0x44>)
 8003008:	f7ff f900 	bl	800220c <xTaskCreate>
 800300c:	6078      	str	r0, [r7, #4]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
 800300e:	687b      	ldr	r3, [r7, #4]
    }
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200001c8 	.word	0x200001c8
 800301c:	200001cc 	.word	0x200001cc
 8003020:	08004580 	.word	0x08004580
 8003024:	080030cd 	.word	0x080030cd

08003028 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003034:	e008      	b.n	8003048 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	18d1      	adds	r1, r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f8dd 	bl	8003214 <prvInsertTimerInActiveList>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ea      	bne.n	8003036 <prvReloadTimer+0xe>
        }
    }
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <prvProcessExpiredTimer+0x5c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3304      	adds	r3, #4
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fd7f 	bl	8001b88 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff ffc3 	bl	8003028 <prvReloadTimer>
 80030a2:	e008      	b.n	80030b6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	4798      	blx	r3
    }
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200001c0 	.word	0x200001c0

080030cc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030d4:	f107 0308 	add.w	r3, r7, #8
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f857 	bl	800318c <prvGetNextExpireTime>
 80030de:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4619      	mov	r1, r3
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f803 	bl	80030f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80030ea:	f000 f8d5 	bl	8003298 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030ee:	e7f1      	b.n	80030d4 <prvTimerTask+0x8>

080030f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80030fa:	f7ff fa1b 	bl	8002534 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f866 	bl	80031d4 <prvSampleTimeNow>
 8003108:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d130      	bne.n	8003172 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <prvProcessTimerOrBlockTask+0x3c>
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	429a      	cmp	r2, r3
 800311c:	d806      	bhi.n	800312c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800311e:	f7ff fa17 	bl	8002550 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ffa1 	bl	800306c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800312a:	e024      	b.n	8003176 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <prvProcessTimerOrBlockTask+0x90>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <prvProcessTimerOrBlockTask+0x50>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <prvProcessTimerOrBlockTask+0x52>
 8003140:	2300      	movs	r3, #0
 8003142:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <prvProcessTimerOrBlockTask+0x94>)
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	f7fe ffed 	bl	8002130 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003156:	f7ff f9fb 	bl	8002550 <xTaskResumeAll>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <prvProcessTimerOrBlockTask+0x98>)
 8003162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	f3bf 8f6f 	isb	sy
    }
 8003170:	e001      	b.n	8003176 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003172:	f7ff f9ed 	bl	8002550 <xTaskResumeAll>
    }
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200001c4 	.word	0x200001c4
 8003184:	200001c8 	.word	0x200001c8
 8003188:	e000ed04 	.word	0xe000ed04

0800318c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <prvGetNextExpireTime+0x44>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <prvGetNextExpireTime+0x16>
 800319e:	2201      	movs	r2, #1
 80031a0:	e000      	b.n	80031a4 <prvGetNextExpireTime+0x18>
 80031a2:	2200      	movs	r2, #0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <prvGetNextExpireTime+0x44>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e001      	b.n	80031c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80031c0:	68fb      	ldr	r3, [r7, #12]
    }
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	200001c0 	.word	0x200001c0

080031d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80031dc:	f7ff fa96 	bl	800270c <xTaskGetTickCount>
 80031e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <prvSampleTimeNow+0x3c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d205      	bcs.n	80031f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80031ec:	f000 f910 	bl	8003410 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e002      	b.n	80031fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80031fe:	4a04      	ldr	r2, [pc, #16]	; (8003210 <prvSampleTimeNow+0x3c>)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003204:	68fb      	ldr	r3, [r7, #12]
    }
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200001d0 	.word	0x200001d0

08003214 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d812      	bhi.n	8003260 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e01b      	b.n	8003286 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <prvInsertTimerInActiveList+0x7c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7fe fc5c 	bl	8001b16 <vListInsert>
 800325e:	e012      	b.n	8003286 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d206      	bcs.n	8003276 <prvInsertTimerInActiveList+0x62>
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003270:	2301      	movs	r3, #1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e007      	b.n	8003286 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <prvInsertTimerInActiveList+0x80>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7fe fc48 	bl	8001b16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003286:	697b      	ldr	r3, [r7, #20]
    }
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	200001c4 	.word	0x200001c4
 8003294:	200001c0 	.word	0x200001c0

08003298 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800329e:	e0a5      	b.n	80033ec <prvProcessReceivedCommands+0x154>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	da0a      	bge.n	80032bc <prvProcessReceivedCommands+0x24>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	3304      	adds	r3, #4
 80032aa:	61fb      	str	r3, [r7, #28]
                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	6850      	ldr	r0, [r2, #4]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	6892      	ldr	r2, [r2, #8]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f2c0 8093 	blt.w	80033ea <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <prvProcessReceivedCommands+0x42>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fc57 	bl	8001b88 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032da:	463b      	mov	r3, r7
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff79 	bl	80031d4 <prvSampleTimeNow>
 80032e2:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d87f      	bhi.n	80033ec <prvProcessReceivedCommands+0x154>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <prvProcessReceivedCommands+0x5c>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003319 	.word	0x08003319
 80032fc:	08003381 	.word	0x08003381
 8003300:	08003395 	.word	0x08003395
 8003304:	080033c1 	.word	0x080033c1
 8003308:	08003319 	.word	0x08003319
 800330c:	08003319 	.word	0x08003319
 8003310:	08003381 	.word	0x08003381
 8003314:	08003395 	.word	0x08003395
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	b2da      	uxtb	r2, r3
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	18d1      	adds	r1, r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	69b8      	ldr	r0, [r7, #24]
 8003338:	f7ff ff6c 	bl	8003214 <prvInsertTimerInActiveList>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d054      	beq.n	80033ec <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d009      	beq.n	8003364 <prvProcessReceivedCommands+0xcc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	4413      	add	r3, r2
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4619      	mov	r1, r3
 800335c:	69b8      	ldr	r0, [r7, #24]
 800335e:	f7ff fe63 	bl	8003028 <prvReloadTimer>
 8003362:	e008      	b.n	8003376 <prvProcessReceivedCommands+0xde>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	69b8      	ldr	r0, [r7, #24]
 800337c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800337e:	e035      	b.n	80033ec <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	b2da      	uxtb	r2, r3
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003392:	e02b      	b.n	80033ec <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	18d1      	adds	r1, r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	69b8      	ldr	r0, [r7, #24]
 80033ba:	f7ff ff2b 	bl	8003214 <prvInsertTimerInActiveList>
                        break;
 80033be:	e015      	b.n	80033ec <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 80033ce:	69b8      	ldr	r0, [r7, #24]
 80033d0:	f000 fa94 	bl	80038fc <vPortFree>
 80033d4:	e00a      	b.n	80033ec <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80033e8:	e000      	b.n	80033ec <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80033ea:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <prvProcessReceivedCommands+0x174>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1d39      	adds	r1, r7, #4
 80033f2:	2200      	movs	r2, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fcbd 	bl	8001d74 <xQueueReceive>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f47f af4f 	bne.w	80032a0 <prvProcessReceivedCommands+0x8>
        }
    }
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	200001c8 	.word	0x200001c8

08003410 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003416:	e009      	b.n	800342c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <prvSwitchTimerLists+0x44>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003422:	f04f 31ff 	mov.w	r1, #4294967295
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f7ff fe20 	bl	800306c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <prvSwitchTimerLists+0x44>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003436:	4b07      	ldr	r3, [pc, #28]	; (8003454 <prvSwitchTimerLists+0x44>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <prvSwitchTimerLists+0x48>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a04      	ldr	r2, [pc, #16]	; (8003454 <prvSwitchTimerLists+0x44>)
 8003442:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <prvSwitchTimerLists+0x48>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6013      	str	r3, [r2, #0]
    }
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200001c0 	.word	0x200001c0
 8003458:	200001c4 	.word	0x200001c4

0800345c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003460:	f000 f8da 	bl	8003618 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <prvCheckForValidListAndQueue+0x54>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11d      	bne.n	80034a8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800346c:	4811      	ldr	r0, [pc, #68]	; (80034b4 <prvCheckForValidListAndQueue+0x58>)
 800346e:	f7fe fb25 	bl	8001abc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003472:	4811      	ldr	r0, [pc, #68]	; (80034b8 <prvCheckForValidListAndQueue+0x5c>)
 8003474:	f7fe fb22 	bl	8001abc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <prvCheckForValidListAndQueue+0x60>)
 800347a:	4a0e      	ldr	r2, [pc, #56]	; (80034b4 <prvCheckForValidListAndQueue+0x58>)
 800347c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <prvCheckForValidListAndQueue+0x64>)
 8003480:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <prvCheckForValidListAndQueue+0x5c>)
 8003482:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003484:	2200      	movs	r2, #0
 8003486:	2110      	movs	r1, #16
 8003488:	2005      	movs	r0, #5
 800348a:	f7fe fc0d 	bl	8001ca8 <xQueueGenericCreate>
 800348e:	4603      	mov	r3, r0
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <prvCheckForValidListAndQueue+0x54>)
 8003492:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <prvCheckForValidListAndQueue+0x54>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <prvCheckForValidListAndQueue+0x54>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4908      	ldr	r1, [pc, #32]	; (80034c4 <prvCheckForValidListAndQueue+0x68>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fe04 	bl	80020b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80034a8:	f000 f8d2 	bl	8003650 <vPortExitCritical>
    }
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200001c8 	.word	0x200001c8
 80034b4:	20000198 	.word	0x20000198
 80034b8:	200001ac 	.word	0x200001ac
 80034bc:	200001c0 	.word	0x200001c0
 80034c0:	200001c4 	.word	0x200001c4
 80034c4:	08004588 	.word	0x08004588

080034c8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3b04      	subs	r3, #4
 80034d8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3b04      	subs	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0201 	bic.w	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3b04      	subs	r3, #4
 80034f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034f8:	4a0c      	ldr	r2, [pc, #48]	; (800352c <pxPortInitialiseStack+0x64>)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3b14      	subs	r3, #20
 8003502:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b04      	subs	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f06f 0202 	mvn.w	r2, #2
 8003516:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3b20      	subs	r3, #32
 800351c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	08003531 	.word	0x08003531

08003530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	603b      	str	r3, [r7, #0]
        __asm volatile
 800353a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800353e:	b672      	cpsid	i
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	b662      	cpsie	i
 800354e:	607b      	str	r3, [r7, #4]
    }
 8003550:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003552:	bf00      	nop
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0fc      	beq.n	8003554 <prvTaskExitError+0x24>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
	...

08003570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <pxCurrentTCBConst2>)
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	6808      	ldr	r0, [r1, #0]
 8003576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357a:	f380 8809 	msr	PSP, r0
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f380 8811 	msr	BASEPRI, r0
 800358a:	4770      	bx	lr
 800358c:	f3af 8000 	nop.w

08003590 <pxCurrentTCBConst2>:
 8003590:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop

08003598 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003598:	4808      	ldr	r0, [pc, #32]	; (80035bc <prvPortStartFirstTask+0x24>)
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	f380 8808 	msr	MSP, r0
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f380 8814 	msr	CONTROL, r0
 80035aa:	b662      	cpsie	i
 80035ac:	b661      	cpsie	f
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	df00      	svc	0
 80035b8:	bf00      	nop
 80035ba:	0000      	.short	0x0000
 80035bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop

080035c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
            *pucFirstUserPriorityRegister = ulOriginalPriority;
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <xPortStartScheduler+0x48>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <xPortStartScheduler+0x48>)
 80035ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80035d4:	4b0d      	ldr	r3, [pc, #52]	; (800360c <xPortStartScheduler+0x48>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0c      	ldr	r2, [pc, #48]	; (800360c <xPortStartScheduler+0x48>)
 80035da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035de:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80035e0:	f000 f8ae 	bl	8003740 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <xPortStartScheduler+0x4c>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80035ea:	f000 f8cd 	bl	8003788 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <xPortStartScheduler+0x50>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a08      	ldr	r2, [pc, #32]	; (8003614 <xPortStartScheduler+0x50>)
 80035f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035f8:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80035fa:	f7ff ffcd 	bl	8003598 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80035fe:	f7ff f979 	bl	80028f4 <vTaskSwitchContext>
    prvTaskExitError();
 8003602:	f7ff ff95 	bl	8003530 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	e000ed20 	.word	0xe000ed20
 8003610:	20000010 	.word	0x20000010
 8003614:	e000ef34 	.word	0xe000ef34

08003618 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
        __asm volatile
 800361e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003622:	b672      	cpsid	i
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	b662      	cpsie	i
 8003632:	607b      	str	r3, [r7, #4]
    }
 8003634:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <vPortEnterCritical+0x34>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	4a03      	ldr	r2, [pc, #12]	; (800364c <vPortEnterCritical+0x34>)
 800363e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20000010 	.word	0x20000010

08003650 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <vPortExitCritical+0x30>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3b01      	subs	r3, #1
 800365c:	4a08      	ldr	r2, [pc, #32]	; (8003680 <vPortExitCritical+0x30>)
 800365e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <vPortExitCritical+0x30>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <vPortExitCritical+0x24>
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003672:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	20000010 	.word	0x20000010
	...

08003690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003690:	f3ef 8009 	mrs	r0, PSP
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <pxCurrentTCBConst>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	f01e 0f10 	tst.w	lr, #16
 80036a0:	bf08      	it	eq
 80036a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036aa:	6010      	str	r0, [r2, #0]
 80036ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036b0:	f04f 0040 	mov.w	r0, #64	; 0x40
 80036b4:	b672      	cpsid	i
 80036b6:	f380 8811 	msr	BASEPRI, r0
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	b662      	cpsie	i
 80036c4:	f7ff f916 	bl	80028f4 <vTaskSwitchContext>
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f380 8811 	msr	BASEPRI, r0
 80036d0:	bc09      	pop	{r0, r3}
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	6808      	ldr	r0, [r1, #0]
 80036d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036da:	f01e 0f10 	tst.w	lr, #16
 80036de:	bf08      	it	eq
 80036e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80036e4:	f380 8809 	msr	PSP, r0
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <pxCurrentTCBConst>:
 80036f0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop

080036f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
        __asm volatile
 80036fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003702:	b672      	cpsid	i
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	b662      	cpsie	i
 8003712:	607b      	str	r3, [r7, #4]
    }
 8003714:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003716:	f7ff f809 	bl	800272c <xTaskIncrementTick>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <SysTick_Handler+0x44>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f383 8811 	msr	BASEPRI, r3
    }
 8003732:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003734:	bf00      	nop
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <vPortSetupTimerInterrupt+0x34>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <vPortSetupTimerInterrupt+0x38>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <vPortSetupTimerInterrupt+0x3c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <vPortSetupTimerInterrupt+0x40>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	099b      	lsrs	r3, r3, #6
 800375c:	4a09      	ldr	r2, [pc, #36]	; (8003784 <vPortSetupTimerInterrupt+0x44>)
 800375e:	3b01      	subs	r3, #1
 8003760:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003762:	4b04      	ldr	r3, [pc, #16]	; (8003774 <vPortSetupTimerInterrupt+0x34>)
 8003764:	2207      	movs	r2, #7
 8003766:	601a      	str	r2, [r3, #0]
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000e010 	.word	0xe000e010
 8003778:	e000e018 	.word	0xe000e018
 800377c:	20000000 	.word	0x20000000
 8003780:	10624dd3 	.word	0x10624dd3
 8003784:	e000e014 	.word	0xe000e014

08003788 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003788:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003798 <vPortEnableVFP+0x10>
 800378c:	6801      	ldr	r1, [r0, #0]
 800378e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003792:	6001      	str	r1, [r0, #0]
 8003794:	4770      	bx	lr
 8003796:	0000      	.short	0x0000
 8003798:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop

080037a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80037ac:	f7fe fec2 	bl	8002534 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037b0:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <pvPortMalloc+0x144>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037b8:	f000 f8e0 	bl	800397c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037bc:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <pvPortMalloc+0x148>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 8086 	bne.w	80038d6 <pvPortMalloc+0x136>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01e      	beq.n	800380e <pvPortMalloc+0x6e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80037d0:	2208      	movs	r2, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d218      	bcs.n	800380e <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 80037dc:	2208      	movs	r2, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d011      	beq.n	8003812 <pvPortMalloc+0x72>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f023 0307 	bic.w	r3, r3, #7
 80037f4:	3308      	adds	r3, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d205      	bcs.n	8003808 <pvPortMalloc+0x68>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f023 0307 	bic.w	r3, r3, #7
 8003802:	3308      	adds	r3, #8
 8003804:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003806:	e004      	b.n	8003812 <pvPortMalloc+0x72>
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
                    }
                    else
                    {
                        xWantedSize = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800380c:	e001      	b.n	8003812 <pvPortMalloc+0x72>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05e      	beq.n	80038d6 <pvPortMalloc+0x136>
 8003818:	4b34      	ldr	r3, [pc, #208]	; (80038ec <pvPortMalloc+0x14c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d859      	bhi.n	80038d6 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003822:	4b33      	ldr	r3, [pc, #204]	; (80038f0 <pvPortMalloc+0x150>)
 8003824:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8003826:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <pvPortMalloc+0x150>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800382c:	e004      	b.n	8003838 <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d903      	bls.n	800384a <pvPortMalloc+0xaa>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f1      	bne.n	800382e <pvPortMalloc+0x8e>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <pvPortMalloc+0x144>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	429a      	cmp	r2, r3
 8003852:	d040      	beq.n	80038d6 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2208      	movs	r2, #8
 800385a:	4413      	add	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	2308      	movs	r3, #8
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	429a      	cmp	r2, r3
 8003874:	d90f      	bls.n	8003896 <pvPortMalloc+0xf6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	1ad2      	subs	r2, r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003890:	68b8      	ldr	r0, [r7, #8]
 8003892:	f000 f8d5 	bl	8003a40 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <pvPortMalloc+0x14c>)
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <pvPortMalloc+0x14c>)
 80038a2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <pvPortMalloc+0x14c>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <pvPortMalloc+0x154>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d203      	bcs.n	80038b8 <pvPortMalloc+0x118>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <pvPortMalloc+0x14c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <pvPortMalloc+0x154>)
 80038b6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <pvPortMalloc+0x148>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <pvPortMalloc+0x158>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <pvPortMalloc+0x158>)
 80038d4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80038d6:	f7fe fe3b 	bl	8002550 <xTaskResumeAll>
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	2000b9dc 	.word	0x2000b9dc
 80038e8:	2000b9f0 	.word	0x2000b9f0
 80038ec:	2000b9e0 	.word	0x2000b9e0
 80038f0:	2000b9d4 	.word	0x2000b9d4
 80038f4:	2000b9e4 	.word	0x2000b9e4
 80038f8:	2000b9e8 	.word	0x2000b9e8

080038fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02c      	beq.n	8003968 <vPortFree+0x6c>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800390e:	2308      	movs	r3, #8
 8003910:	425b      	negs	r3, r3
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <vPortFree+0x74>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01e      	beq.n	8003968 <vPortFree+0x6c>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d11a      	bne.n	8003968 <vPortFree+0x6c>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <vPortFree+0x74>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	43db      	mvns	r3, r3
 800393c:	401a      	ands	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003942:	f7fe fdf7 	bl	8002534 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <vPortFree+0x78>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4413      	add	r3, r2
 8003950:	4a08      	ldr	r2, [pc, #32]	; (8003974 <vPortFree+0x78>)
 8003952:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003954:	68b8      	ldr	r0, [r7, #8]
 8003956:	f000 f873 	bl	8003a40 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <vPortFree+0x7c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	4a05      	ldr	r2, [pc, #20]	; (8003978 <vPortFree+0x7c>)
 8003962:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003964:	f7fe fdf4 	bl	8002550 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000b9f0 	.word	0x2000b9f0
 8003974:	2000b9e0 	.word	0x2000b9e0
 8003978:	2000b9ec 	.word	0x2000b9ec

0800397c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003982:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8003986:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <prvHeapInit+0xac>)
 800398a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3307      	adds	r3, #7
 800399a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0307 	bic.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <prvHeapInit+0xac>)
 80039ac:	4413      	add	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <prvHeapInit+0xb0>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <prvHeapInit+0xb0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80039c8:	2208      	movs	r2, #8
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0307 	bic.w	r3, r3, #7
 80039d6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <prvHeapInit+0xb4>)
 80039dc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <prvHeapInit+0xb4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2200      	movs	r2, #0
 80039e4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <prvHeapInit+0xb4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <prvHeapInit+0xb4>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <prvHeapInit+0xb8>)
 8003a0a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <prvHeapInit+0xbc>)
 8003a12:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a14:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <prvHeapInit+0xc0>)
 8003a16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a1a:	601a      	str	r2, [r3, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	200001d4 	.word	0x200001d4
 8003a2c:	2000b9d4 	.word	0x2000b9d4
 8003a30:	2000b9dc 	.word	0x2000b9dc
 8003a34:	2000b9e4 	.word	0x2000b9e4
 8003a38:	2000b9e0 	.word	0x2000b9e0
 8003a3c:	2000b9f0 	.word	0x2000b9f0

08003a40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <prvInsertBlockIntoFreeList+0xac>)
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e002      	b.n	8003a54 <prvInsertBlockIntoFreeList+0x14>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d8f7      	bhi.n	8003a4e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d108      	bne.n	8003a82 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	441a      	add	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d118      	bne.n	8003ac8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <prvInsertBlockIntoFreeList+0xb0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d00d      	beq.n	8003abe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	441a      	add	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e008      	b.n	8003ad0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003abe:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <prvInsertBlockIntoFreeList+0xb0>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e003      	b.n	8003ad0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d002      	beq.n	8003ade <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	2000b9d4 	.word	0x2000b9d4
 8003af0:	2000b9dc 	.word	0x2000b9dc

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	; (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	; (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	; (8003b38 <__libc_init_array+0x44>)
 8003b08:	f000 fd02 	bl	8004510 <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	08004614 	.word	0x08004614
 8003b30:	08004614 	.word	0x08004614
 8003b34:	08004614 	.word	0x08004614
 8003b38:	08004618 	.word	0x08004618

08003b3c <memcpy>:
 8003b3c:	440a      	add	r2, r1
 8003b3e:	4291      	cmp	r1, r2
 8003b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b44:	d100      	bne.n	8003b48 <memcpy+0xc>
 8003b46:	4770      	bx	lr
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b52:	4291      	cmp	r1, r2
 8003b54:	d1f9      	bne.n	8003b4a <memcpy+0xe>
 8003b56:	bd10      	pop	{r4, pc}

08003b58 <memset>:
 8003b58:	4402      	add	r2, r0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d100      	bne.n	8003b62 <memset+0xa>
 8003b60:	4770      	bx	lr
 8003b62:	f803 1b01 	strb.w	r1, [r3], #1
 8003b66:	e7f9      	b.n	8003b5c <memset+0x4>

08003b68 <_puts_r>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	460e      	mov	r6, r1
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	b118      	cbz	r0, 8003b78 <_puts_r+0x10>
 8003b70:	6983      	ldr	r3, [r0, #24]
 8003b72:	b90b      	cbnz	r3, 8003b78 <_puts_r+0x10>
 8003b74:	f000 fa48 	bl	8004008 <__sinit>
 8003b78:	69ab      	ldr	r3, [r5, #24]
 8003b7a:	68ac      	ldr	r4, [r5, #8]
 8003b7c:	b913      	cbnz	r3, 8003b84 <_puts_r+0x1c>
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f000 fa42 	bl	8004008 <__sinit>
 8003b84:	4b2c      	ldr	r3, [pc, #176]	; (8003c38 <_puts_r+0xd0>)
 8003b86:	429c      	cmp	r4, r3
 8003b88:	d120      	bne.n	8003bcc <_puts_r+0x64>
 8003b8a:	686c      	ldr	r4, [r5, #4]
 8003b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b8e:	07db      	lsls	r3, r3, #31
 8003b90:	d405      	bmi.n	8003b9e <_puts_r+0x36>
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	0598      	lsls	r0, r3, #22
 8003b96:	d402      	bmi.n	8003b9e <_puts_r+0x36>
 8003b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b9a:	f000 fad3 	bl	8004144 <__retarget_lock_acquire_recursive>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	0719      	lsls	r1, r3, #28
 8003ba2:	d51d      	bpl.n	8003be0 <_puts_r+0x78>
 8003ba4:	6923      	ldr	r3, [r4, #16]
 8003ba6:	b1db      	cbz	r3, 8003be0 <_puts_r+0x78>
 8003ba8:	3e01      	subs	r6, #1
 8003baa:	68a3      	ldr	r3, [r4, #8]
 8003bac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60a3      	str	r3, [r4, #8]
 8003bb4:	bb39      	cbnz	r1, 8003c06 <_puts_r+0x9e>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da38      	bge.n	8003c2c <_puts_r+0xc4>
 8003bba:	4622      	mov	r2, r4
 8003bbc:	210a      	movs	r1, #10
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 f848 	bl	8003c54 <__swbuf_r>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d011      	beq.n	8003bec <_puts_r+0x84>
 8003bc8:	250a      	movs	r5, #10
 8003bca:	e011      	b.n	8003bf0 <_puts_r+0x88>
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <_puts_r+0xd4>)
 8003bce:	429c      	cmp	r4, r3
 8003bd0:	d101      	bne.n	8003bd6 <_puts_r+0x6e>
 8003bd2:	68ac      	ldr	r4, [r5, #8]
 8003bd4:	e7da      	b.n	8003b8c <_puts_r+0x24>
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <_puts_r+0xd8>)
 8003bd8:	429c      	cmp	r4, r3
 8003bda:	bf08      	it	eq
 8003bdc:	68ec      	ldreq	r4, [r5, #12]
 8003bde:	e7d5      	b.n	8003b8c <_puts_r+0x24>
 8003be0:	4621      	mov	r1, r4
 8003be2:	4628      	mov	r0, r5
 8003be4:	f000 f888 	bl	8003cf8 <__swsetup_r>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d0dd      	beq.n	8003ba8 <_puts_r+0x40>
 8003bec:	f04f 35ff 	mov.w	r5, #4294967295
 8003bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bf2:	07da      	lsls	r2, r3, #31
 8003bf4:	d405      	bmi.n	8003c02 <_puts_r+0x9a>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	059b      	lsls	r3, r3, #22
 8003bfa:	d402      	bmi.n	8003c02 <_puts_r+0x9a>
 8003bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bfe:	f000 faa2 	bl	8004146 <__retarget_lock_release_recursive>
 8003c02:	4628      	mov	r0, r5
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	da04      	bge.n	8003c14 <_puts_r+0xac>
 8003c0a:	69a2      	ldr	r2, [r4, #24]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	dc06      	bgt.n	8003c1e <_puts_r+0xb6>
 8003c10:	290a      	cmp	r1, #10
 8003c12:	d004      	beq.n	8003c1e <_puts_r+0xb6>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	6022      	str	r2, [r4, #0]
 8003c1a:	7019      	strb	r1, [r3, #0]
 8003c1c:	e7c5      	b.n	8003baa <_puts_r+0x42>
 8003c1e:	4622      	mov	r2, r4
 8003c20:	4628      	mov	r0, r5
 8003c22:	f000 f817 	bl	8003c54 <__swbuf_r>
 8003c26:	3001      	adds	r0, #1
 8003c28:	d1bf      	bne.n	8003baa <_puts_r+0x42>
 8003c2a:	e7df      	b.n	8003bec <_puts_r+0x84>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	250a      	movs	r5, #10
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	6022      	str	r2, [r4, #0]
 8003c34:	701d      	strb	r5, [r3, #0]
 8003c36:	e7db      	b.n	8003bf0 <_puts_r+0x88>
 8003c38:	080045cc 	.word	0x080045cc
 8003c3c:	080045ec 	.word	0x080045ec
 8003c40:	080045ac 	.word	0x080045ac

08003c44 <puts>:
 8003c44:	4b02      	ldr	r3, [pc, #8]	; (8003c50 <puts+0xc>)
 8003c46:	4601      	mov	r1, r0
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	f7ff bf8d 	b.w	8003b68 <_puts_r>
 8003c4e:	bf00      	nop
 8003c50:	20000014 	.word	0x20000014

08003c54 <__swbuf_r>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	460e      	mov	r6, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	b118      	cbz	r0, 8003c66 <__swbuf_r+0x12>
 8003c5e:	6983      	ldr	r3, [r0, #24]
 8003c60:	b90b      	cbnz	r3, 8003c66 <__swbuf_r+0x12>
 8003c62:	f000 f9d1 	bl	8004008 <__sinit>
 8003c66:	4b21      	ldr	r3, [pc, #132]	; (8003cec <__swbuf_r+0x98>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d12b      	bne.n	8003cc4 <__swbuf_r+0x70>
 8003c6c:	686c      	ldr	r4, [r5, #4]
 8003c6e:	69a3      	ldr	r3, [r4, #24]
 8003c70:	60a3      	str	r3, [r4, #8]
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	071a      	lsls	r2, r3, #28
 8003c76:	d52f      	bpl.n	8003cd8 <__swbuf_r+0x84>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	b36b      	cbz	r3, 8003cd8 <__swbuf_r+0x84>
 8003c7c:	6923      	ldr	r3, [r4, #16]
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	1ac0      	subs	r0, r0, r3
 8003c82:	6963      	ldr	r3, [r4, #20]
 8003c84:	b2f6      	uxtb	r6, r6
 8003c86:	4283      	cmp	r3, r0
 8003c88:	4637      	mov	r7, r6
 8003c8a:	dc04      	bgt.n	8003c96 <__swbuf_r+0x42>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f000 f926 	bl	8003ee0 <_fflush_r>
 8003c94:	bb30      	cbnz	r0, 8003ce4 <__swbuf_r+0x90>
 8003c96:	68a3      	ldr	r3, [r4, #8]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	60a3      	str	r3, [r4, #8]
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	6022      	str	r2, [r4, #0]
 8003ca2:	701e      	strb	r6, [r3, #0]
 8003ca4:	6963      	ldr	r3, [r4, #20]
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	4283      	cmp	r3, r0
 8003caa:	d004      	beq.n	8003cb6 <__swbuf_r+0x62>
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	07db      	lsls	r3, r3, #31
 8003cb0:	d506      	bpl.n	8003cc0 <__swbuf_r+0x6c>
 8003cb2:	2e0a      	cmp	r6, #10
 8003cb4:	d104      	bne.n	8003cc0 <__swbuf_r+0x6c>
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	4628      	mov	r0, r5
 8003cba:	f000 f911 	bl	8003ee0 <_fflush_r>
 8003cbe:	b988      	cbnz	r0, 8003ce4 <__swbuf_r+0x90>
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <__swbuf_r+0x9c>)
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	d101      	bne.n	8003cce <__swbuf_r+0x7a>
 8003cca:	68ac      	ldr	r4, [r5, #8]
 8003ccc:	e7cf      	b.n	8003c6e <__swbuf_r+0x1a>
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <__swbuf_r+0xa0>)
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	bf08      	it	eq
 8003cd4:	68ec      	ldreq	r4, [r5, #12]
 8003cd6:	e7ca      	b.n	8003c6e <__swbuf_r+0x1a>
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 f80c 	bl	8003cf8 <__swsetup_r>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d0cb      	beq.n	8003c7c <__swbuf_r+0x28>
 8003ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ce8:	e7ea      	b.n	8003cc0 <__swbuf_r+0x6c>
 8003cea:	bf00      	nop
 8003cec:	080045cc 	.word	0x080045cc
 8003cf0:	080045ec 	.word	0x080045ec
 8003cf4:	080045ac 	.word	0x080045ac

08003cf8 <__swsetup_r>:
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <__swsetup_r+0xcc>)
 8003cfa:	b570      	push	{r4, r5, r6, lr}
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	4606      	mov	r6, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	b125      	cbz	r5, 8003d0e <__swsetup_r+0x16>
 8003d04:	69ab      	ldr	r3, [r5, #24]
 8003d06:	b913      	cbnz	r3, 8003d0e <__swsetup_r+0x16>
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 f97d 	bl	8004008 <__sinit>
 8003d0e:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <__swsetup_r+0xd0>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d10f      	bne.n	8003d34 <__swsetup_r+0x3c>
 8003d14:	686c      	ldr	r4, [r5, #4]
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d1c:	0719      	lsls	r1, r3, #28
 8003d1e:	d42c      	bmi.n	8003d7a <__swsetup_r+0x82>
 8003d20:	06dd      	lsls	r5, r3, #27
 8003d22:	d411      	bmi.n	8003d48 <__swsetup_r+0x50>
 8003d24:	2309      	movs	r3, #9
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d32:	e03e      	b.n	8003db2 <__swsetup_r+0xba>
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <__swsetup_r+0xd4>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d101      	bne.n	8003d3e <__swsetup_r+0x46>
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	e7eb      	b.n	8003d16 <__swsetup_r+0x1e>
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <__swsetup_r+0xd8>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	bf08      	it	eq
 8003d44:	68ec      	ldreq	r4, [r5, #12]
 8003d46:	e7e6      	b.n	8003d16 <__swsetup_r+0x1e>
 8003d48:	0758      	lsls	r0, r3, #29
 8003d4a:	d512      	bpl.n	8003d72 <__swsetup_r+0x7a>
 8003d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d4e:	b141      	cbz	r1, 8003d62 <__swsetup_r+0x6a>
 8003d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d54:	4299      	cmp	r1, r3
 8003d56:	d002      	beq.n	8003d5e <__swsetup_r+0x66>
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f000 fa59 	bl	8004210 <_free_r>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	6363      	str	r3, [r4, #52]	; 0x34
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6063      	str	r3, [r4, #4]
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	b94b      	cbnz	r3, 8003d92 <__swsetup_r+0x9a>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d88:	d003      	beq.n	8003d92 <__swsetup_r+0x9a>
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f9ff 	bl	8004190 <__smakebuf_r>
 8003d92:	89a0      	ldrh	r0, [r4, #12]
 8003d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d98:	f010 0301 	ands.w	r3, r0, #1
 8003d9c:	d00a      	beq.n	8003db4 <__swsetup_r+0xbc>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60a3      	str	r3, [r4, #8]
 8003da2:	6963      	ldr	r3, [r4, #20]
 8003da4:	425b      	negs	r3, r3
 8003da6:	61a3      	str	r3, [r4, #24]
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	b943      	cbnz	r3, 8003dbe <__swsetup_r+0xc6>
 8003dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003db0:	d1ba      	bne.n	8003d28 <__swsetup_r+0x30>
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	0781      	lsls	r1, r0, #30
 8003db6:	bf58      	it	pl
 8003db8:	6963      	ldrpl	r3, [r4, #20]
 8003dba:	60a3      	str	r3, [r4, #8]
 8003dbc:	e7f4      	b.n	8003da8 <__swsetup_r+0xb0>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e7f7      	b.n	8003db2 <__swsetup_r+0xba>
 8003dc2:	bf00      	nop
 8003dc4:	20000014 	.word	0x20000014
 8003dc8:	080045cc 	.word	0x080045cc
 8003dcc:	080045ec 	.word	0x080045ec
 8003dd0:	080045ac 	.word	0x080045ac

08003dd4 <__sflush_r>:
 8003dd4:	898a      	ldrh	r2, [r1, #12]
 8003dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	4605      	mov	r5, r0
 8003ddc:	0710      	lsls	r0, r2, #28
 8003dde:	460c      	mov	r4, r1
 8003de0:	d458      	bmi.n	8003e94 <__sflush_r+0xc0>
 8003de2:	684b      	ldr	r3, [r1, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dc05      	bgt.n	8003df4 <__sflush_r+0x20>
 8003de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	dc02      	bgt.n	8003df4 <__sflush_r+0x20>
 8003dee:	2000      	movs	r0, #0
 8003df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	d0f9      	beq.n	8003dee <__sflush_r+0x1a>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e00:	682f      	ldr	r7, [r5, #0]
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	d032      	beq.n	8003e6c <__sflush_r+0x98>
 8003e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e08:	89a3      	ldrh	r3, [r4, #12]
 8003e0a:	075a      	lsls	r2, r3, #29
 8003e0c:	d505      	bpl.n	8003e1a <__sflush_r+0x46>
 8003e0e:	6863      	ldr	r3, [r4, #4]
 8003e10:	1ac0      	subs	r0, r0, r3
 8003e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e14:	b10b      	cbz	r3, 8003e1a <__sflush_r+0x46>
 8003e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e18:	1ac0      	subs	r0, r0, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e20:	6a21      	ldr	r1, [r4, #32]
 8003e22:	4628      	mov	r0, r5
 8003e24:	47b0      	blx	r6
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	d106      	bne.n	8003e3a <__sflush_r+0x66>
 8003e2c:	6829      	ldr	r1, [r5, #0]
 8003e2e:	291d      	cmp	r1, #29
 8003e30:	d82c      	bhi.n	8003e8c <__sflush_r+0xb8>
 8003e32:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <__sflush_r+0x108>)
 8003e34:	40ca      	lsrs	r2, r1
 8003e36:	07d6      	lsls	r6, r2, #31
 8003e38:	d528      	bpl.n	8003e8c <__sflush_r+0xb8>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	6062      	str	r2, [r4, #4]
 8003e3e:	04d9      	lsls	r1, r3, #19
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	d504      	bpl.n	8003e50 <__sflush_r+0x7c>
 8003e46:	1c42      	adds	r2, r0, #1
 8003e48:	d101      	bne.n	8003e4e <__sflush_r+0x7a>
 8003e4a:	682b      	ldr	r3, [r5, #0]
 8003e4c:	b903      	cbnz	r3, 8003e50 <__sflush_r+0x7c>
 8003e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8003e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e52:	602f      	str	r7, [r5, #0]
 8003e54:	2900      	cmp	r1, #0
 8003e56:	d0ca      	beq.n	8003dee <__sflush_r+0x1a>
 8003e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e5c:	4299      	cmp	r1, r3
 8003e5e:	d002      	beq.n	8003e66 <__sflush_r+0x92>
 8003e60:	4628      	mov	r0, r5
 8003e62:	f000 f9d5 	bl	8004210 <_free_r>
 8003e66:	2000      	movs	r0, #0
 8003e68:	6360      	str	r0, [r4, #52]	; 0x34
 8003e6a:	e7c1      	b.n	8003df0 <__sflush_r+0x1c>
 8003e6c:	6a21      	ldr	r1, [r4, #32]
 8003e6e:	2301      	movs	r3, #1
 8003e70:	4628      	mov	r0, r5
 8003e72:	47b0      	blx	r6
 8003e74:	1c41      	adds	r1, r0, #1
 8003e76:	d1c7      	bne.n	8003e08 <__sflush_r+0x34>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0c4      	beq.n	8003e08 <__sflush_r+0x34>
 8003e7e:	2b1d      	cmp	r3, #29
 8003e80:	d001      	beq.n	8003e86 <__sflush_r+0xb2>
 8003e82:	2b16      	cmp	r3, #22
 8003e84:	d101      	bne.n	8003e8a <__sflush_r+0xb6>
 8003e86:	602f      	str	r7, [r5, #0]
 8003e88:	e7b1      	b.n	8003dee <__sflush_r+0x1a>
 8003e8a:	89a3      	ldrh	r3, [r4, #12]
 8003e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	e7ad      	b.n	8003df0 <__sflush_r+0x1c>
 8003e94:	690f      	ldr	r7, [r1, #16]
 8003e96:	2f00      	cmp	r7, #0
 8003e98:	d0a9      	beq.n	8003dee <__sflush_r+0x1a>
 8003e9a:	0793      	lsls	r3, r2, #30
 8003e9c:	680e      	ldr	r6, [r1, #0]
 8003e9e:	bf08      	it	eq
 8003ea0:	694b      	ldreq	r3, [r1, #20]
 8003ea2:	600f      	str	r7, [r1, #0]
 8003ea4:	bf18      	it	ne
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	eba6 0807 	sub.w	r8, r6, r7
 8003eac:	608b      	str	r3, [r1, #8]
 8003eae:	f1b8 0f00 	cmp.w	r8, #0
 8003eb2:	dd9c      	ble.n	8003dee <__sflush_r+0x1a>
 8003eb4:	6a21      	ldr	r1, [r4, #32]
 8003eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003eb8:	4643      	mov	r3, r8
 8003eba:	463a      	mov	r2, r7
 8003ebc:	4628      	mov	r0, r5
 8003ebe:	47b0      	blx	r6
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	dc06      	bgt.n	8003ed2 <__sflush_r+0xfe>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	e78e      	b.n	8003df0 <__sflush_r+0x1c>
 8003ed2:	4407      	add	r7, r0
 8003ed4:	eba8 0800 	sub.w	r8, r8, r0
 8003ed8:	e7e9      	b.n	8003eae <__sflush_r+0xda>
 8003eda:	bf00      	nop
 8003edc:	20400001 	.word	0x20400001

08003ee0 <_fflush_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	690b      	ldr	r3, [r1, #16]
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	b913      	cbnz	r3, 8003ef0 <_fflush_r+0x10>
 8003eea:	2500      	movs	r5, #0
 8003eec:	4628      	mov	r0, r5
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	b118      	cbz	r0, 8003efa <_fflush_r+0x1a>
 8003ef2:	6983      	ldr	r3, [r0, #24]
 8003ef4:	b90b      	cbnz	r3, 8003efa <_fflush_r+0x1a>
 8003ef6:	f000 f887 	bl	8004008 <__sinit>
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <_fflush_r+0x6c>)
 8003efc:	429c      	cmp	r4, r3
 8003efe:	d11b      	bne.n	8003f38 <_fflush_r+0x58>
 8003f00:	686c      	ldr	r4, [r5, #4]
 8003f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0ef      	beq.n	8003eea <_fflush_r+0xa>
 8003f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f0c:	07d0      	lsls	r0, r2, #31
 8003f0e:	d404      	bmi.n	8003f1a <_fflush_r+0x3a>
 8003f10:	0599      	lsls	r1, r3, #22
 8003f12:	d402      	bmi.n	8003f1a <_fflush_r+0x3a>
 8003f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f16:	f000 f915 	bl	8004144 <__retarget_lock_acquire_recursive>
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	f7ff ff59 	bl	8003dd4 <__sflush_r>
 8003f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f24:	07da      	lsls	r2, r3, #31
 8003f26:	4605      	mov	r5, r0
 8003f28:	d4e0      	bmi.n	8003eec <_fflush_r+0xc>
 8003f2a:	89a3      	ldrh	r3, [r4, #12]
 8003f2c:	059b      	lsls	r3, r3, #22
 8003f2e:	d4dd      	bmi.n	8003eec <_fflush_r+0xc>
 8003f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f32:	f000 f908 	bl	8004146 <__retarget_lock_release_recursive>
 8003f36:	e7d9      	b.n	8003eec <_fflush_r+0xc>
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <_fflush_r+0x70>)
 8003f3a:	429c      	cmp	r4, r3
 8003f3c:	d101      	bne.n	8003f42 <_fflush_r+0x62>
 8003f3e:	68ac      	ldr	r4, [r5, #8]
 8003f40:	e7df      	b.n	8003f02 <_fflush_r+0x22>
 8003f42:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <_fflush_r+0x74>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	bf08      	it	eq
 8003f48:	68ec      	ldreq	r4, [r5, #12]
 8003f4a:	e7da      	b.n	8003f02 <_fflush_r+0x22>
 8003f4c:	080045cc 	.word	0x080045cc
 8003f50:	080045ec 	.word	0x080045ec
 8003f54:	080045ac 	.word	0x080045ac

08003f58 <std>:
 8003f58:	2300      	movs	r3, #0
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f66:	6083      	str	r3, [r0, #8]
 8003f68:	8181      	strh	r1, [r0, #12]
 8003f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f6c:	81c2      	strh	r2, [r0, #14]
 8003f6e:	6183      	str	r3, [r0, #24]
 8003f70:	4619      	mov	r1, r3
 8003f72:	2208      	movs	r2, #8
 8003f74:	305c      	adds	r0, #92	; 0x5c
 8003f76:	f7ff fdef 	bl	8003b58 <memset>
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <std+0x38>)
 8003f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <std+0x3c>)
 8003f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <std+0x40>)
 8003f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <std+0x44>)
 8003f88:	6224      	str	r4, [r4, #32]
 8003f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	bf00      	nop
 8003f90:	08004385 	.word	0x08004385
 8003f94:	080043a7 	.word	0x080043a7
 8003f98:	080043df 	.word	0x080043df
 8003f9c:	08004403 	.word	0x08004403

08003fa0 <_cleanup_r>:
 8003fa0:	4901      	ldr	r1, [pc, #4]	; (8003fa8 <_cleanup_r+0x8>)
 8003fa2:	f000 b8af 	b.w	8004104 <_fwalk_reent>
 8003fa6:	bf00      	nop
 8003fa8:	08003ee1 	.word	0x08003ee1

08003fac <__sfmoreglue>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	1e4a      	subs	r2, r1, #1
 8003fb0:	2568      	movs	r5, #104	; 0x68
 8003fb2:	4355      	muls	r5, r2
 8003fb4:	460e      	mov	r6, r1
 8003fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fba:	f000 f979 	bl	80042b0 <_malloc_r>
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	b140      	cbz	r0, 8003fd4 <__sfmoreglue+0x28>
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8003fc8:	300c      	adds	r0, #12
 8003fca:	60a0      	str	r0, [r4, #8]
 8003fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fd0:	f7ff fdc2 	bl	8003b58 <memset>
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}

08003fd8 <__sfp_lock_acquire>:
 8003fd8:	4801      	ldr	r0, [pc, #4]	; (8003fe0 <__sfp_lock_acquire+0x8>)
 8003fda:	f000 b8b3 	b.w	8004144 <__retarget_lock_acquire_recursive>
 8003fde:	bf00      	nop
 8003fe0:	2000ba98 	.word	0x2000ba98

08003fe4 <__sfp_lock_release>:
 8003fe4:	4801      	ldr	r0, [pc, #4]	; (8003fec <__sfp_lock_release+0x8>)
 8003fe6:	f000 b8ae 	b.w	8004146 <__retarget_lock_release_recursive>
 8003fea:	bf00      	nop
 8003fec:	2000ba98 	.word	0x2000ba98

08003ff0 <__sinit_lock_acquire>:
 8003ff0:	4801      	ldr	r0, [pc, #4]	; (8003ff8 <__sinit_lock_acquire+0x8>)
 8003ff2:	f000 b8a7 	b.w	8004144 <__retarget_lock_acquire_recursive>
 8003ff6:	bf00      	nop
 8003ff8:	2000ba93 	.word	0x2000ba93

08003ffc <__sinit_lock_release>:
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <__sinit_lock_release+0x8>)
 8003ffe:	f000 b8a2 	b.w	8004146 <__retarget_lock_release_recursive>
 8004002:	bf00      	nop
 8004004:	2000ba93 	.word	0x2000ba93

08004008 <__sinit>:
 8004008:	b510      	push	{r4, lr}
 800400a:	4604      	mov	r4, r0
 800400c:	f7ff fff0 	bl	8003ff0 <__sinit_lock_acquire>
 8004010:	69a3      	ldr	r3, [r4, #24]
 8004012:	b11b      	cbz	r3, 800401c <__sinit+0x14>
 8004014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004018:	f7ff bff0 	b.w	8003ffc <__sinit_lock_release>
 800401c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004020:	6523      	str	r3, [r4, #80]	; 0x50
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <__sinit+0x68>)
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <__sinit+0x6c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	62a2      	str	r2, [r4, #40]	; 0x28
 800402a:	42a3      	cmp	r3, r4
 800402c:	bf04      	itt	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	61a3      	streq	r3, [r4, #24]
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f820 	bl	8004078 <__sfp>
 8004038:	6060      	str	r0, [r4, #4]
 800403a:	4620      	mov	r0, r4
 800403c:	f000 f81c 	bl	8004078 <__sfp>
 8004040:	60a0      	str	r0, [r4, #8]
 8004042:	4620      	mov	r0, r4
 8004044:	f000 f818 	bl	8004078 <__sfp>
 8004048:	2200      	movs	r2, #0
 800404a:	60e0      	str	r0, [r4, #12]
 800404c:	2104      	movs	r1, #4
 800404e:	6860      	ldr	r0, [r4, #4]
 8004050:	f7ff ff82 	bl	8003f58 <std>
 8004054:	68a0      	ldr	r0, [r4, #8]
 8004056:	2201      	movs	r2, #1
 8004058:	2109      	movs	r1, #9
 800405a:	f7ff ff7d 	bl	8003f58 <std>
 800405e:	68e0      	ldr	r0, [r4, #12]
 8004060:	2202      	movs	r2, #2
 8004062:	2112      	movs	r1, #18
 8004064:	f7ff ff78 	bl	8003f58 <std>
 8004068:	2301      	movs	r3, #1
 800406a:	61a3      	str	r3, [r4, #24]
 800406c:	e7d2      	b.n	8004014 <__sinit+0xc>
 800406e:	bf00      	nop
 8004070:	080045a8 	.word	0x080045a8
 8004074:	08003fa1 	.word	0x08003fa1

08004078 <__sfp>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	4607      	mov	r7, r0
 800407c:	f7ff ffac 	bl	8003fd8 <__sfp_lock_acquire>
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <__sfp+0x84>)
 8004082:	681e      	ldr	r6, [r3, #0]
 8004084:	69b3      	ldr	r3, [r6, #24]
 8004086:	b913      	cbnz	r3, 800408e <__sfp+0x16>
 8004088:	4630      	mov	r0, r6
 800408a:	f7ff ffbd 	bl	8004008 <__sinit>
 800408e:	3648      	adds	r6, #72	; 0x48
 8004090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004094:	3b01      	subs	r3, #1
 8004096:	d503      	bpl.n	80040a0 <__sfp+0x28>
 8004098:	6833      	ldr	r3, [r6, #0]
 800409a:	b30b      	cbz	r3, 80040e0 <__sfp+0x68>
 800409c:	6836      	ldr	r6, [r6, #0]
 800409e:	e7f7      	b.n	8004090 <__sfp+0x18>
 80040a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040a4:	b9d5      	cbnz	r5, 80040dc <__sfp+0x64>
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <__sfp+0x88>)
 80040a8:	60e3      	str	r3, [r4, #12]
 80040aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040ae:	6665      	str	r5, [r4, #100]	; 0x64
 80040b0:	f000 f847 	bl	8004142 <__retarget_lock_init_recursive>
 80040b4:	f7ff ff96 	bl	8003fe4 <__sfp_lock_release>
 80040b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040c0:	6025      	str	r5, [r4, #0]
 80040c2:	61a5      	str	r5, [r4, #24]
 80040c4:	2208      	movs	r2, #8
 80040c6:	4629      	mov	r1, r5
 80040c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040cc:	f7ff fd44 	bl	8003b58 <memset>
 80040d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040d8:	4620      	mov	r0, r4
 80040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040dc:	3468      	adds	r4, #104	; 0x68
 80040de:	e7d9      	b.n	8004094 <__sfp+0x1c>
 80040e0:	2104      	movs	r1, #4
 80040e2:	4638      	mov	r0, r7
 80040e4:	f7ff ff62 	bl	8003fac <__sfmoreglue>
 80040e8:	4604      	mov	r4, r0
 80040ea:	6030      	str	r0, [r6, #0]
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d1d5      	bne.n	800409c <__sfp+0x24>
 80040f0:	f7ff ff78 	bl	8003fe4 <__sfp_lock_release>
 80040f4:	230c      	movs	r3, #12
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	e7ee      	b.n	80040d8 <__sfp+0x60>
 80040fa:	bf00      	nop
 80040fc:	080045a8 	.word	0x080045a8
 8004100:	ffff0001 	.word	0xffff0001

08004104 <_fwalk_reent>:
 8004104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004108:	4606      	mov	r6, r0
 800410a:	4688      	mov	r8, r1
 800410c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004110:	2700      	movs	r7, #0
 8004112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004116:	f1b9 0901 	subs.w	r9, r9, #1
 800411a:	d505      	bpl.n	8004128 <_fwalk_reent+0x24>
 800411c:	6824      	ldr	r4, [r4, #0]
 800411e:	2c00      	cmp	r4, #0
 8004120:	d1f7      	bne.n	8004112 <_fwalk_reent+0xe>
 8004122:	4638      	mov	r0, r7
 8004124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004128:	89ab      	ldrh	r3, [r5, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d907      	bls.n	800413e <_fwalk_reent+0x3a>
 800412e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004132:	3301      	adds	r3, #1
 8004134:	d003      	beq.n	800413e <_fwalk_reent+0x3a>
 8004136:	4629      	mov	r1, r5
 8004138:	4630      	mov	r0, r6
 800413a:	47c0      	blx	r8
 800413c:	4307      	orrs	r7, r0
 800413e:	3568      	adds	r5, #104	; 0x68
 8004140:	e7e9      	b.n	8004116 <_fwalk_reent+0x12>

08004142 <__retarget_lock_init_recursive>:
 8004142:	4770      	bx	lr

08004144 <__retarget_lock_acquire_recursive>:
 8004144:	4770      	bx	lr

08004146 <__retarget_lock_release_recursive>:
 8004146:	4770      	bx	lr

08004148 <__swhatbuf_r>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	460e      	mov	r6, r1
 800414c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004150:	2900      	cmp	r1, #0
 8004152:	b096      	sub	sp, #88	; 0x58
 8004154:	4614      	mov	r4, r2
 8004156:	461d      	mov	r5, r3
 8004158:	da07      	bge.n	800416a <__swhatbuf_r+0x22>
 800415a:	2300      	movs	r3, #0
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	89b3      	ldrh	r3, [r6, #12]
 8004160:	061a      	lsls	r2, r3, #24
 8004162:	d410      	bmi.n	8004186 <__swhatbuf_r+0x3e>
 8004164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004168:	e00e      	b.n	8004188 <__swhatbuf_r+0x40>
 800416a:	466a      	mov	r2, sp
 800416c:	f000 f970 	bl	8004450 <_fstat_r>
 8004170:	2800      	cmp	r0, #0
 8004172:	dbf2      	blt.n	800415a <__swhatbuf_r+0x12>
 8004174:	9a01      	ldr	r2, [sp, #4]
 8004176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800417a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800417e:	425a      	negs	r2, r3
 8004180:	415a      	adcs	r2, r3
 8004182:	602a      	str	r2, [r5, #0]
 8004184:	e7ee      	b.n	8004164 <__swhatbuf_r+0x1c>
 8004186:	2340      	movs	r3, #64	; 0x40
 8004188:	2000      	movs	r0, #0
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	b016      	add	sp, #88	; 0x58
 800418e:	bd70      	pop	{r4, r5, r6, pc}

08004190 <__smakebuf_r>:
 8004190:	898b      	ldrh	r3, [r1, #12]
 8004192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004194:	079d      	lsls	r5, r3, #30
 8004196:	4606      	mov	r6, r0
 8004198:	460c      	mov	r4, r1
 800419a:	d507      	bpl.n	80041ac <__smakebuf_r+0x1c>
 800419c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2301      	movs	r3, #1
 80041a6:	6163      	str	r3, [r4, #20]
 80041a8:	b002      	add	sp, #8
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	ab01      	add	r3, sp, #4
 80041ae:	466a      	mov	r2, sp
 80041b0:	f7ff ffca 	bl	8004148 <__swhatbuf_r>
 80041b4:	9900      	ldr	r1, [sp, #0]
 80041b6:	4605      	mov	r5, r0
 80041b8:	4630      	mov	r0, r6
 80041ba:	f000 f879 	bl	80042b0 <_malloc_r>
 80041be:	b948      	cbnz	r0, 80041d4 <__smakebuf_r+0x44>
 80041c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041c4:	059a      	lsls	r2, r3, #22
 80041c6:	d4ef      	bmi.n	80041a8 <__smakebuf_r+0x18>
 80041c8:	f023 0303 	bic.w	r3, r3, #3
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	81a3      	strh	r3, [r4, #12]
 80041d2:	e7e3      	b.n	800419c <__smakebuf_r+0xc>
 80041d4:	4b0d      	ldr	r3, [pc, #52]	; (800420c <__smakebuf_r+0x7c>)
 80041d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	6020      	str	r0, [r4, #0]
 80041dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e0:	81a3      	strh	r3, [r4, #12]
 80041e2:	9b00      	ldr	r3, [sp, #0]
 80041e4:	6163      	str	r3, [r4, #20]
 80041e6:	9b01      	ldr	r3, [sp, #4]
 80041e8:	6120      	str	r0, [r4, #16]
 80041ea:	b15b      	cbz	r3, 8004204 <__smakebuf_r+0x74>
 80041ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041f0:	4630      	mov	r0, r6
 80041f2:	f000 f93f 	bl	8004474 <_isatty_r>
 80041f6:	b128      	cbz	r0, 8004204 <__smakebuf_r+0x74>
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	f023 0303 	bic.w	r3, r3, #3
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	81a3      	strh	r3, [r4, #12]
 8004204:	89a0      	ldrh	r0, [r4, #12]
 8004206:	4305      	orrs	r5, r0
 8004208:	81a5      	strh	r5, [r4, #12]
 800420a:	e7cd      	b.n	80041a8 <__smakebuf_r+0x18>
 800420c:	08003fa1 	.word	0x08003fa1

08004210 <_free_r>:
 8004210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004212:	2900      	cmp	r1, #0
 8004214:	d048      	beq.n	80042a8 <_free_r+0x98>
 8004216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421a:	9001      	str	r0, [sp, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f1a1 0404 	sub.w	r4, r1, #4
 8004222:	bfb8      	it	lt
 8004224:	18e4      	addlt	r4, r4, r3
 8004226:	f000 f947 	bl	80044b8 <__malloc_lock>
 800422a:	4a20      	ldr	r2, [pc, #128]	; (80042ac <_free_r+0x9c>)
 800422c:	9801      	ldr	r0, [sp, #4]
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	4615      	mov	r5, r2
 8004232:	b933      	cbnz	r3, 8004242 <_free_r+0x32>
 8004234:	6063      	str	r3, [r4, #4]
 8004236:	6014      	str	r4, [r2, #0]
 8004238:	b003      	add	sp, #12
 800423a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800423e:	f000 b941 	b.w	80044c4 <__malloc_unlock>
 8004242:	42a3      	cmp	r3, r4
 8004244:	d90b      	bls.n	800425e <_free_r+0x4e>
 8004246:	6821      	ldr	r1, [r4, #0]
 8004248:	1862      	adds	r2, r4, r1
 800424a:	4293      	cmp	r3, r2
 800424c:	bf04      	itt	eq
 800424e:	681a      	ldreq	r2, [r3, #0]
 8004250:	685b      	ldreq	r3, [r3, #4]
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	bf04      	itt	eq
 8004256:	1852      	addeq	r2, r2, r1
 8004258:	6022      	streq	r2, [r4, #0]
 800425a:	602c      	str	r4, [r5, #0]
 800425c:	e7ec      	b.n	8004238 <_free_r+0x28>
 800425e:	461a      	mov	r2, r3
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b10b      	cbz	r3, 8004268 <_free_r+0x58>
 8004264:	42a3      	cmp	r3, r4
 8004266:	d9fa      	bls.n	800425e <_free_r+0x4e>
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	1855      	adds	r5, r2, r1
 800426c:	42a5      	cmp	r5, r4
 800426e:	d10b      	bne.n	8004288 <_free_r+0x78>
 8004270:	6824      	ldr	r4, [r4, #0]
 8004272:	4421      	add	r1, r4
 8004274:	1854      	adds	r4, r2, r1
 8004276:	42a3      	cmp	r3, r4
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	d1dd      	bne.n	8004238 <_free_r+0x28>
 800427c:	681c      	ldr	r4, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	6053      	str	r3, [r2, #4]
 8004282:	4421      	add	r1, r4
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	e7d7      	b.n	8004238 <_free_r+0x28>
 8004288:	d902      	bls.n	8004290 <_free_r+0x80>
 800428a:	230c      	movs	r3, #12
 800428c:	6003      	str	r3, [r0, #0]
 800428e:	e7d3      	b.n	8004238 <_free_r+0x28>
 8004290:	6825      	ldr	r5, [r4, #0]
 8004292:	1961      	adds	r1, r4, r5
 8004294:	428b      	cmp	r3, r1
 8004296:	bf04      	itt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	bf04      	itt	eq
 80042a0:	1949      	addeq	r1, r1, r5
 80042a2:	6021      	streq	r1, [r4, #0]
 80042a4:	6054      	str	r4, [r2, #4]
 80042a6:	e7c7      	b.n	8004238 <_free_r+0x28>
 80042a8:	b003      	add	sp, #12
 80042aa:	bd30      	pop	{r4, r5, pc}
 80042ac:	2000b9f4 	.word	0x2000b9f4

080042b0 <_malloc_r>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	1ccd      	adds	r5, r1, #3
 80042b4:	f025 0503 	bic.w	r5, r5, #3
 80042b8:	3508      	adds	r5, #8
 80042ba:	2d0c      	cmp	r5, #12
 80042bc:	bf38      	it	cc
 80042be:	250c      	movcc	r5, #12
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	4606      	mov	r6, r0
 80042c4:	db01      	blt.n	80042ca <_malloc_r+0x1a>
 80042c6:	42a9      	cmp	r1, r5
 80042c8:	d903      	bls.n	80042d2 <_malloc_r+0x22>
 80042ca:	230c      	movs	r3, #12
 80042cc:	6033      	str	r3, [r6, #0]
 80042ce:	2000      	movs	r0, #0
 80042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d2:	f000 f8f1 	bl	80044b8 <__malloc_lock>
 80042d6:	4921      	ldr	r1, [pc, #132]	; (800435c <_malloc_r+0xac>)
 80042d8:	680a      	ldr	r2, [r1, #0]
 80042da:	4614      	mov	r4, r2
 80042dc:	b99c      	cbnz	r4, 8004306 <_malloc_r+0x56>
 80042de:	4f20      	ldr	r7, [pc, #128]	; (8004360 <_malloc_r+0xb0>)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b923      	cbnz	r3, 80042ee <_malloc_r+0x3e>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4630      	mov	r0, r6
 80042e8:	f000 f83c 	bl	8004364 <_sbrk_r>
 80042ec:	6038      	str	r0, [r7, #0]
 80042ee:	4629      	mov	r1, r5
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 f837 	bl	8004364 <_sbrk_r>
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d123      	bne.n	8004342 <_malloc_r+0x92>
 80042fa:	230c      	movs	r3, #12
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	4630      	mov	r0, r6
 8004300:	f000 f8e0 	bl	80044c4 <__malloc_unlock>
 8004304:	e7e3      	b.n	80042ce <_malloc_r+0x1e>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	1b5b      	subs	r3, r3, r5
 800430a:	d417      	bmi.n	800433c <_malloc_r+0x8c>
 800430c:	2b0b      	cmp	r3, #11
 800430e:	d903      	bls.n	8004318 <_malloc_r+0x68>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	441c      	add	r4, r3
 8004314:	6025      	str	r5, [r4, #0]
 8004316:	e004      	b.n	8004322 <_malloc_r+0x72>
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	42a2      	cmp	r2, r4
 800431c:	bf0c      	ite	eq
 800431e:	600b      	streq	r3, [r1, #0]
 8004320:	6053      	strne	r3, [r2, #4]
 8004322:	4630      	mov	r0, r6
 8004324:	f000 f8ce 	bl	80044c4 <__malloc_unlock>
 8004328:	f104 000b 	add.w	r0, r4, #11
 800432c:	1d23      	adds	r3, r4, #4
 800432e:	f020 0007 	bic.w	r0, r0, #7
 8004332:	1ac2      	subs	r2, r0, r3
 8004334:	d0cc      	beq.n	80042d0 <_malloc_r+0x20>
 8004336:	1a1b      	subs	r3, r3, r0
 8004338:	50a3      	str	r3, [r4, r2]
 800433a:	e7c9      	b.n	80042d0 <_malloc_r+0x20>
 800433c:	4622      	mov	r2, r4
 800433e:	6864      	ldr	r4, [r4, #4]
 8004340:	e7cc      	b.n	80042dc <_malloc_r+0x2c>
 8004342:	1cc4      	adds	r4, r0, #3
 8004344:	f024 0403 	bic.w	r4, r4, #3
 8004348:	42a0      	cmp	r0, r4
 800434a:	d0e3      	beq.n	8004314 <_malloc_r+0x64>
 800434c:	1a21      	subs	r1, r4, r0
 800434e:	4630      	mov	r0, r6
 8004350:	f000 f808 	bl	8004364 <_sbrk_r>
 8004354:	3001      	adds	r0, #1
 8004356:	d1dd      	bne.n	8004314 <_malloc_r+0x64>
 8004358:	e7cf      	b.n	80042fa <_malloc_r+0x4a>
 800435a:	bf00      	nop
 800435c:	2000b9f4 	.word	0x2000b9f4
 8004360:	2000b9f8 	.word	0x2000b9f8

08004364 <_sbrk_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d06      	ldr	r5, [pc, #24]	; (8004380 <_sbrk_r+0x1c>)
 8004368:	2300      	movs	r3, #0
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	f000 f8c0 	bl	80044f4 <_sbrk>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_sbrk_r+0x1a>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_sbrk_r+0x1a>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	2000ba9c 	.word	0x2000ba9c

08004384 <__sread>:
 8004384:	b510      	push	{r4, lr}
 8004386:	460c      	mov	r4, r1
 8004388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438c:	f000 f8a0 	bl	80044d0 <_read_r>
 8004390:	2800      	cmp	r0, #0
 8004392:	bfab      	itete	ge
 8004394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004396:	89a3      	ldrhlt	r3, [r4, #12]
 8004398:	181b      	addge	r3, r3, r0
 800439a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800439e:	bfac      	ite	ge
 80043a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80043a2:	81a3      	strhlt	r3, [r4, #12]
 80043a4:	bd10      	pop	{r4, pc}

080043a6 <__swrite>:
 80043a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043aa:	461f      	mov	r7, r3
 80043ac:	898b      	ldrh	r3, [r1, #12]
 80043ae:	05db      	lsls	r3, r3, #23
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	4616      	mov	r6, r2
 80043b6:	d505      	bpl.n	80043c4 <__swrite+0x1e>
 80043b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043bc:	2302      	movs	r3, #2
 80043be:	2200      	movs	r2, #0
 80043c0:	f000 f868 	bl	8004494 <_lseek_r>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	4632      	mov	r2, r6
 80043d2:	463b      	mov	r3, r7
 80043d4:	4628      	mov	r0, r5
 80043d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043da:	f000 b817 	b.w	800440c <_write_r>

080043de <__sseek>:
 80043de:	b510      	push	{r4, lr}
 80043e0:	460c      	mov	r4, r1
 80043e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e6:	f000 f855 	bl	8004494 <_lseek_r>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	bf15      	itete	ne
 80043f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043fa:	81a3      	strheq	r3, [r4, #12]
 80043fc:	bf18      	it	ne
 80043fe:	81a3      	strhne	r3, [r4, #12]
 8004400:	bd10      	pop	{r4, pc}

08004402 <__sclose>:
 8004402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004406:	f000 b813 	b.w	8004430 <_close_r>
	...

0800440c <_write_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d07      	ldr	r5, [pc, #28]	; (800442c <_write_r+0x20>)
 8004410:	4604      	mov	r4, r0
 8004412:	4608      	mov	r0, r1
 8004414:	4611      	mov	r1, r2
 8004416:	2200      	movs	r2, #0
 8004418:	602a      	str	r2, [r5, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	f7fc fa31 	bl	8000882 <_write>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_write_r+0x1e>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_write_r+0x1e>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	2000ba9c 	.word	0x2000ba9c

08004430 <_close_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4d06      	ldr	r5, [pc, #24]	; (800444c <_close_r+0x1c>)
 8004434:	2300      	movs	r3, #0
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	f7fc fa3d 	bl	80008ba <_close>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_close_r+0x1a>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_close_r+0x1a>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	2000ba9c 	.word	0x2000ba9c

08004450 <_fstat_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4d07      	ldr	r5, [pc, #28]	; (8004470 <_fstat_r+0x20>)
 8004454:	2300      	movs	r3, #0
 8004456:	4604      	mov	r4, r0
 8004458:	4608      	mov	r0, r1
 800445a:	4611      	mov	r1, r2
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	f7fc fa38 	bl	80008d2 <_fstat>
 8004462:	1c43      	adds	r3, r0, #1
 8004464:	d102      	bne.n	800446c <_fstat_r+0x1c>
 8004466:	682b      	ldr	r3, [r5, #0]
 8004468:	b103      	cbz	r3, 800446c <_fstat_r+0x1c>
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	bd38      	pop	{r3, r4, r5, pc}
 800446e:	bf00      	nop
 8004470:	2000ba9c 	.word	0x2000ba9c

08004474 <_isatty_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4d06      	ldr	r5, [pc, #24]	; (8004490 <_isatty_r+0x1c>)
 8004478:	2300      	movs	r3, #0
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc fa37 	bl	80008f2 <_isatty>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_isatty_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_isatty_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	2000ba9c 	.word	0x2000ba9c

08004494 <_lseek_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4d07      	ldr	r5, [pc, #28]	; (80044b4 <_lseek_r+0x20>)
 8004498:	4604      	mov	r4, r0
 800449a:	4608      	mov	r0, r1
 800449c:	4611      	mov	r1, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	602a      	str	r2, [r5, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fc fa30 	bl	8000908 <_lseek>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_lseek_r+0x1e>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_lseek_r+0x1e>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	2000ba9c 	.word	0x2000ba9c

080044b8 <__malloc_lock>:
 80044b8:	4801      	ldr	r0, [pc, #4]	; (80044c0 <__malloc_lock+0x8>)
 80044ba:	f7ff be43 	b.w	8004144 <__retarget_lock_acquire_recursive>
 80044be:	bf00      	nop
 80044c0:	2000ba94 	.word	0x2000ba94

080044c4 <__malloc_unlock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	; (80044cc <__malloc_unlock+0x8>)
 80044c6:	f7ff be3e 	b.w	8004146 <__retarget_lock_release_recursive>
 80044ca:	bf00      	nop
 80044cc:	2000ba94 	.word	0x2000ba94

080044d0 <_read_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d07      	ldr	r5, [pc, #28]	; (80044f0 <_read_r+0x20>)
 80044d4:	4604      	mov	r4, r0
 80044d6:	4608      	mov	r0, r1
 80044d8:	4611      	mov	r1, r2
 80044da:	2200      	movs	r2, #0
 80044dc:	602a      	str	r2, [r5, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	f7fc f9b2 	bl	8000848 <_read>
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	d102      	bne.n	80044ee <_read_r+0x1e>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	b103      	cbz	r3, 80044ee <_read_r+0x1e>
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	2000ba9c 	.word	0x2000ba9c

080044f4 <_sbrk>:
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <_sbrk+0x14>)
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	4602      	mov	r2, r0
 80044fa:	b909      	cbnz	r1, 8004500 <_sbrk+0xc>
 80044fc:	4903      	ldr	r1, [pc, #12]	; (800450c <_sbrk+0x18>)
 80044fe:	6019      	str	r1, [r3, #0]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	4402      	add	r2, r0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	4770      	bx	lr
 8004508:	2000b9fc 	.word	0x2000b9fc
 800450c:	2000baa0 	.word	0x2000baa0

08004510 <_init>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr

0800451c <_fini>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr
